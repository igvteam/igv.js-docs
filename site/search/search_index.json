{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"igv.js is an embeddable interactive genome visualization component developed by the Integrative Genomics Viewer (IGV) team. Citing igv.js # James T Robinson, Helga Thorvaldsdottir, Douglass Turner, Jill P Mesirov, igv.js: an embeddable JavaScript implementation of the Integrative Genomics Viewer (IGV), Bioinformatics, Volume 39, Issue 1, January 2023, btac830, https://doi.org/10.1093/bioinformatics/btac830 Examples # Alignments Interactions Copy number Multiple regions Mutation Annotation Format (MAF) Variant color options More Supported Browsers # igv.js require a modern web browser with support for Javascript ECMAScript 2015 (ES6). License # igv.js is MIT licensed. Release Notes #","title":"Home"},{"location":"#citing-igvjs","text":"James T Robinson, Helga Thorvaldsdottir, Douglass Turner, Jill P Mesirov, igv.js: an embeddable JavaScript implementation of the Integrative Genomics Viewer (IGV), Bioinformatics, Volume 39, Issue 1, January 2023, btac830, https://doi.org/10.1093/bioinformatics/btac830","title":"Citing igv.js"},{"location":"#examples","text":"Alignments Interactions Copy number Multiple regions Mutation Annotation Format (MAF) Variant color options More","title":"Examples"},{"location":"#supported-browsers","text":"igv.js require a modern web browser with support for Javascript ECMAScript 2015 (ES6).","title":"Supported Browsers"},{"location":"#license","text":"igv.js is MIT licensed.","title":"License"},{"location":"#release-notes","text":"","title":"Release Notes"},{"location":"Browser-API/","text":"After initialization, the browser can be controlled using the functions described below. loadGenome # async Returns a promise to load a reference genome. browser.loadGenome(config) See the reference object description for details on configuration options. Example browser.loadGenome( { \"id\": \"hg38\", \"name\": \"Human (GRCh38/hg38)\", \"fastaURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai\", \"cytobandURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt\", \"tracks\": [ { \"name\": \"Refseq Genes\", \"url\": \"https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz\", \"order\": 1000000, \"indexed\": false } ] } } loadSessionObject # async Load a session object, also referred to as a browser configuration object. See Browser Creation for details. Loading a session will clear the current reference genome and all tracks. browser.loadSessionObject(config) loadSession # async Load a session by url or a javascript File blob, which should point to a valid session json object. The json is a representation of a browser configuration object described in the Browser Creation section, but does not support parameter values not representable as json such as functions and promises. The method takes an object with a single property, url , which can be a URL or a local File blob. browser.loadSession({url}) loadTrack # async Load a track and return a promise for the track object. See the Tracks page for more detail on configuration options. const track = await browser.loadTrack(config) Example browser.loadTrack({ url: 'http://data.broadinstitute.org/igvdata/1KG/b37/data/HG02450/alignment/HG02450.mapped.ILLUMINA.bwa.ACB.low_coverage.20120522.bam', label: 'HG02450' }) loadSampleInfo # async Load a sample information file. The method can take any one of the following as a parameter: \u2022 URL \u2022 local File blob \u2022 JavaScript object browser.loadSampleInfo({url}) or browser.loadSampleInfo(sampleInfoObject) discardSampleInfo # async Discard all sample information data. The method takes no parameters. browser.discardSampleInfo() findTracks # Returns an array of tracks matching input critera. Criteria can be specified as either A property value pair A function taking the track object as an argument and returning true or false const tracks = browser.findTracks(propertyOrFunction, value) Examples console.log(\"Find tracks by property 'id' with value 'T2':\"); const tracksById = browser.findTracks(\"id\", \"T2\"); for(let t of tracksById) { console.log(` id=${t.id} name=${t.name}`); } console.log(\"Find tracks by type 'wig'\"); const tracksByType = browser.findTracks(\"type\", \"wig\"); for(let t of tracksByType) { console.log(` id=${t.id} name=${t.name}`); } console.log(\"Find tracks by function function(track) {return track.name && track.name.startsWith('GM128')}\"); const tracksByFunction = browser.findTracks(function(track) { return track.name && track.name.startsWith('GM128'); }); removeTrack # Remove a track object from the browser. browser.removeTrack(track) removeTrackByName # Remove track(s) whose \"name\" property matches the given name. browser.removeTrackByName(name) loadROI # async Load an annotation file or array of annotation files to define regions of interest (ROIs). Regions of interest are overlaid on the genome view across all tracks. See Regions of Interest for more details. browser.loadROI(trackConfig | arrayOfTrackConfigs ) Examples browser.loadROI([ { name: 'ROI set 1', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_1.bed', format: bed, color: \"rgba(68, 134, 247, 0.25)\" }, { name: 'ROI set 2', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_2.bed', format: bed, color: \"rgba(0, 150, 50, 0.25)\" }) clearROIs # Remove all regions of interest. browser.clearROIs() getUserDefinedROIs # async Returns a promise for an array containing all user-defined ROIs (regions of interest created interactively during an igv.js session). const rois = await browser.getUserDefinedROIs() search # async Search by a locus, and change browser locus to corresponding region. By default the search function uses a webservice to query positions of RefSeq genes for genome \"hg19\". This can be overriden during initialization by supplying a url to a custom webservice. For details see Browser initialization . browser.search(locus) Examples browser.search('EGFR') browser.search('chr10:1000-2000') Multiple loci can be passed as space delimited list. This will result in a multi-locus view. browser.search('chr10:1000-2000 EGFR') This function returns a promise which resolves to true if the symbol was found, false otherwise. currentLoci # Return the current genomic region as a locus string, or array of locus strings if in multi-locus view. zoomIn # Zoom in by a factor of 2 browser.zoomIn() zoomOut # Zoom out by a factor of 2 browser.zoomOut() currentLoci # Return the current genomic region as a locus string, or an array of locus strings if in multi-locus view const locusStringOrArray = browser.currentLoci() visibilityChange # Signal a change in visibility, typically from hidden (e.g. display:none) to shown (e.g. display:block). This is necessary because changes in display attribute do not trigger events. browser.visibilityChange() If multiple igv browsers are on a page, the function igv.visibilityChange can be used to signal all. igv.visibilityChange(); toJSON # Return the current state of the browser as a JSON style object. This object can be loaded with loadSessionObject. Note the returned value is a jsonifiable object, not a json string. const json = browser.toJSON(); compressedSession # Return a compressed, encoded, string representing the current browser state. const sessionString = browser.compressedSession() This string can be used to load the session on any page hosting an igv.js instance with a url of the form https://myhost/mypage?sessionURL=blob:<compressed session string> Note to reinstate the session queryParametersSupported must be set to true in the igv.js configuration. toSVG # Convert the browser contents to SVG format. This includes ideogram, ruler, and all tracks. The value returned by this function is a serialized SVG object. const svg = browser.toSVG() setCustomCursorGuideMouseHandler # Pass genomic location and mouse location with respect to trackContainer to the provided handler. The data is transmitted as the cursor guide is manipulated across the track container. The handler function will receive an object with the following properties * bp - cursor-guide location. base-pair units. * start - track start location. base-pair units. * end - track end location. base-pair units. * interpolant - cursor-guide location. 0 - 1 units. Example browser.setCustomCursorGuideMouseHandler(({ bp, start, end, interpolant }) => { });","title":"Browser API"},{"location":"Browser-API/#loadgenome","text":"async Returns a promise to load a reference genome. browser.loadGenome(config) See the reference object description for details on configuration options. Example browser.loadGenome( { \"id\": \"hg38\", \"name\": \"Human (GRCh38/hg38)\", \"fastaURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai\", \"cytobandURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt\", \"tracks\": [ { \"name\": \"Refseq Genes\", \"url\": \"https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz\", \"order\": 1000000, \"indexed\": false } ] } }","title":"loadGenome"},{"location":"Browser-API/#loadsessionobject","text":"async Load a session object, also referred to as a browser configuration object. See Browser Creation for details. Loading a session will clear the current reference genome and all tracks. browser.loadSessionObject(config)","title":"loadSessionObject"},{"location":"Browser-API/#loadsession","text":"async Load a session by url or a javascript File blob, which should point to a valid session json object. The json is a representation of a browser configuration object described in the Browser Creation section, but does not support parameter values not representable as json such as functions and promises. The method takes an object with a single property, url , which can be a URL or a local File blob. browser.loadSession({url})","title":"loadSession"},{"location":"Browser-API/#loadtrack","text":"async Load a track and return a promise for the track object. See the Tracks page for more detail on configuration options. const track = await browser.loadTrack(config) Example browser.loadTrack({ url: 'http://data.broadinstitute.org/igvdata/1KG/b37/data/HG02450/alignment/HG02450.mapped.ILLUMINA.bwa.ACB.low_coverage.20120522.bam', label: 'HG02450' })","title":"loadTrack"},{"location":"Browser-API/#loadsampleinfo","text":"async Load a sample information file. The method can take any one of the following as a parameter: \u2022 URL \u2022 local File blob \u2022 JavaScript object browser.loadSampleInfo({url}) or browser.loadSampleInfo(sampleInfoObject)","title":"loadSampleInfo"},{"location":"Browser-API/#discardsampleinfo","text":"async Discard all sample information data. The method takes no parameters. browser.discardSampleInfo()","title":"discardSampleInfo"},{"location":"Browser-API/#findtracks","text":"Returns an array of tracks matching input critera. Criteria can be specified as either A property value pair A function taking the track object as an argument and returning true or false const tracks = browser.findTracks(propertyOrFunction, value) Examples console.log(\"Find tracks by property 'id' with value 'T2':\"); const tracksById = browser.findTracks(\"id\", \"T2\"); for(let t of tracksById) { console.log(` id=${t.id} name=${t.name}`); } console.log(\"Find tracks by type 'wig'\"); const tracksByType = browser.findTracks(\"type\", \"wig\"); for(let t of tracksByType) { console.log(` id=${t.id} name=${t.name}`); } console.log(\"Find tracks by function function(track) {return track.name && track.name.startsWith('GM128')}\"); const tracksByFunction = browser.findTracks(function(track) { return track.name && track.name.startsWith('GM128'); });","title":"findTracks"},{"location":"Browser-API/#removetrack","text":"Remove a track object from the browser. browser.removeTrack(track)","title":"removeTrack"},{"location":"Browser-API/#removetrackbyname","text":"Remove track(s) whose \"name\" property matches the given name. browser.removeTrackByName(name)","title":"removeTrackByName"},{"location":"Browser-API/#loadroi","text":"async Load an annotation file or array of annotation files to define regions of interest (ROIs). Regions of interest are overlaid on the genome view across all tracks. See Regions of Interest for more details. browser.loadROI(trackConfig | arrayOfTrackConfigs ) Examples browser.loadROI([ { name: 'ROI set 1', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_1.bed', format: bed, color: \"rgba(68, 134, 247, 0.25)\" }, { name: 'ROI set 2', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_2.bed', format: bed, color: \"rgba(0, 150, 50, 0.25)\" })","title":"loadROI"},{"location":"Browser-API/#clearrois","text":"Remove all regions of interest. browser.clearROIs()","title":"clearROIs"},{"location":"Browser-API/#getuserdefinedrois","text":"async Returns a promise for an array containing all user-defined ROIs (regions of interest created interactively during an igv.js session). const rois = await browser.getUserDefinedROIs()","title":"getUserDefinedROIs"},{"location":"Browser-API/#search","text":"async Search by a locus, and change browser locus to corresponding region. By default the search function uses a webservice to query positions of RefSeq genes for genome \"hg19\". This can be overriden during initialization by supplying a url to a custom webservice. For details see Browser initialization . browser.search(locus) Examples browser.search('EGFR') browser.search('chr10:1000-2000') Multiple loci can be passed as space delimited list. This will result in a multi-locus view. browser.search('chr10:1000-2000 EGFR') This function returns a promise which resolves to true if the symbol was found, false otherwise.","title":"search"},{"location":"Browser-API/#currentloci","text":"Return the current genomic region as a locus string, or array of locus strings if in multi-locus view.","title":"currentLoci"},{"location":"Browser-API/#zoomin","text":"Zoom in by a factor of 2 browser.zoomIn()","title":"zoomIn"},{"location":"Browser-API/#zoomout","text":"Zoom out by a factor of 2 browser.zoomOut()","title":"zoomOut"},{"location":"Browser-API/#currentloci_1","text":"Return the current genomic region as a locus string, or an array of locus strings if in multi-locus view const locusStringOrArray = browser.currentLoci()","title":"currentLoci"},{"location":"Browser-API/#visibilitychange","text":"Signal a change in visibility, typically from hidden (e.g. display:none) to shown (e.g. display:block). This is necessary because changes in display attribute do not trigger events. browser.visibilityChange() If multiple igv browsers are on a page, the function igv.visibilityChange can be used to signal all. igv.visibilityChange();","title":"visibilityChange"},{"location":"Browser-API/#tojson","text":"Return the current state of the browser as a JSON style object. This object can be loaded with loadSessionObject. Note the returned value is a jsonifiable object, not a json string. const json = browser.toJSON();","title":"toJSON"},{"location":"Browser-API/#compressedsession","text":"Return a compressed, encoded, string representing the current browser state. const sessionString = browser.compressedSession() This string can be used to load the session on any page hosting an igv.js instance with a url of the form https://myhost/mypage?sessionURL=blob:<compressed session string> Note to reinstate the session queryParametersSupported must be set to true in the igv.js configuration.","title":"compressedSession"},{"location":"Browser-API/#tosvg","text":"Convert the browser contents to SVG format. This includes ideogram, ruler, and all tracks. The value returned by this function is a serialized SVG object. const svg = browser.toSVG()","title":"toSVG"},{"location":"Browser-API/#setcustomcursorguidemousehandler","text":"Pass genomic location and mouse location with respect to trackContainer to the provided handler. The data is transmitted as the cursor guide is manipulated across the track container. The handler function will receive an object with the following properties * bp - cursor-guide location. base-pair units. * start - track start location. base-pair units. * end - track end location. base-pair units. * interpolant - cursor-guide location. 0 - 1 units. Example browser.setCustomCursorGuideMouseHandler(({ bp, start, end, interpolant }) => { });","title":"setCustomCursorGuideMouseHandler"},{"location":"Browser-Creation/","text":"The igv.createBrowser function is used to create an igv Browser object and insert it into your dom. The function takes two arguments: (1) The parent element; the browser object will be inserted into the DOM as a child of this element, and (2) A configuration object that defines the browser's initial state. igv.createBrowser returns a promise which resolves to the browser object upon completion. The browser object should be saved by the client program for future calls to the API. The example below creates an igv browser initialized with the hg19 reference genome. <div id=\"igv_div\" <script type=\"module\"> import igv from \"https://cdn.jsdelivr.net/npm/igv@3.0.0/dist/igv.esm.min.js\" const div = document.getElementById(\"igv_div\") const config = { genome: \"hg19\" } const browser = await igv.createBrowser(div, config) </script> Browser configuration options # The object that configures the browser's initial state includes details for the reference genome, track default settings, the initial set of loaded tracks, and the initial view locus. It also controls some aspects of the user interface. All fields are optional except one of either genome or reference . Option Description Default genome String identifier defining genome (e.g. \"hg19\"). See Reference Genome for details and list of supported identifiers. Note: One (but only one) of either genome or reference properties must be set. reference Object defining reference genome. See Reference Genome for details. Note: One (but only one) of either genome or reference properties must be set. flanking Distance (in bp) to pad sides of feature on successful search for gene or other annotation. 1000 genomeList URL to a json file containing an array of genome reference definitions, or an inline json array. These genome definitions are appended to the default list unless loadDefaultGenomes is false. Genomes can be specified from the list by ID with the \"genome\" property. NOTE: the genomeList is globally shared by all igv browser instances on a page. loadDefaultGenomes Load the default genome list on startup from https://igv.org/genomes/genomes.json true locus Initial genomic location(s). Either a string or an array of strings. If an array a viewport is created for each location. minimumBases Minimum window size in base pairs when zooming in 40 queryParametersSupported If true support initialization by query parameters. false search Object defining a web service for supporting search by gene or other annotation. See object details below. Optional. Current a default service is provided for human (hg19, hg38) and mouse (mm10) assemblies. showAllChromosomes Show all chromosome (sequences) in the pulldown control irrespective of size. Set to false to filter sequences < 1/50 the mean length. true showChromosomeWidget Show a chromosome (sequence) pulldown control. true showNavigation Show basic navigation controls (search, zoom in, zoom out). true showIdeogram Show an ideogram of the chromosome in the header of the browser viewport. true showSVGButton Show button that saves browser as SVG file. true showRuler Show a genomic ruler track. true showCenterGuide Show a pair of vertical lines, or single line when zoomed out, framing the base position at the center of view false showCursorTrackGuide Show a vertical line that follows the cursor false trackDefaults Embedded object defining default settings for specific track types (see table below). tracks Array of configuration objects defining tracks initially displayed when app launches. roi Array of track-like configuration objects defining regions of interest. These regions will be overlaid on all tracks. oauthToken oauth access token apiKey Google API key. Optional clientId Google client ID. Optional. genomeList An array of genome json objects, or url to an array of genome json objects. If present genomes can be specified by id with the genome field above. This list is added to the igv.js default list unless loadDefaultGenomes: false loadDefaultGenomes Boolean indicating whether or not the igv.js default genome list should be loaded. Currently this list is loaded from true nucleotideColors Color table for nucleotides in sequence an bam tracks. Object with keys \"A\", \"C\", \"T\", \"G\", and \"N\" showSampleNames Controls display of sample names for track types that support them (VCF with genotypes, SEG, and MUT) sampleinfo Sample information can be included in browser configuration as an array of sample info objects search object details # The search object defines a webservice for fetching genomic location given a gene name or other symbol. The service should return a JSON object with the following structure. The results array is an array of objects with a chromosome, start, and end field. The names of these fields are specified in the configuration object. The end field is optional, if not included end = start + 1. { <resultsField> : <array of results> } Option Description Default url URL to search service. The URL must include the string $FEATURE$ . This string will be replaced by the symbol being queried. if the URL contains the string $GENOME$ is will be replaced by the current genome ID. resultsField JSON field name for property containing the array of results. Treats the response as an array of results. coords Indicates genomic coordinate convention used. Possible values are 0 and 1 1 chromosomeField JSON field name for the chromosome property chromosome startField JSON field name for the start position property start endField JSON field name for the end position property end The results array contain objects with chromosome, start, and end fields named as specified above. The type of the chromosome field is string, the type of start and end fields is integer. E.g. a search for TP53 against hg19 using the defaults should look like this: [{\"chromosome\":\"chr17\",\"start\":7572927,\"end\":7579912}] Browser removal # To remove an igv browser instance call igv.removeBrowser(browser) To remove all igv browsers igv.removeAllBrowsers()","title":"Browser creation"},{"location":"Browser-Creation/#browser-configuration-options","text":"The object that configures the browser's initial state includes details for the reference genome, track default settings, the initial set of loaded tracks, and the initial view locus. It also controls some aspects of the user interface. All fields are optional except one of either genome or reference . Option Description Default genome String identifier defining genome (e.g. \"hg19\"). See Reference Genome for details and list of supported identifiers. Note: One (but only one) of either genome or reference properties must be set. reference Object defining reference genome. See Reference Genome for details. Note: One (but only one) of either genome or reference properties must be set. flanking Distance (in bp) to pad sides of feature on successful search for gene or other annotation. 1000 genomeList URL to a json file containing an array of genome reference definitions, or an inline json array. These genome definitions are appended to the default list unless loadDefaultGenomes is false. Genomes can be specified from the list by ID with the \"genome\" property. NOTE: the genomeList is globally shared by all igv browser instances on a page. loadDefaultGenomes Load the default genome list on startup from https://igv.org/genomes/genomes.json true locus Initial genomic location(s). Either a string or an array of strings. If an array a viewport is created for each location. minimumBases Minimum window size in base pairs when zooming in 40 queryParametersSupported If true support initialization by query parameters. false search Object defining a web service for supporting search by gene or other annotation. See object details below. Optional. Current a default service is provided for human (hg19, hg38) and mouse (mm10) assemblies. showAllChromosomes Show all chromosome (sequences) in the pulldown control irrespective of size. Set to false to filter sequences < 1/50 the mean length. true showChromosomeWidget Show a chromosome (sequence) pulldown control. true showNavigation Show basic navigation controls (search, zoom in, zoom out). true showIdeogram Show an ideogram of the chromosome in the header of the browser viewport. true showSVGButton Show button that saves browser as SVG file. true showRuler Show a genomic ruler track. true showCenterGuide Show a pair of vertical lines, or single line when zoomed out, framing the base position at the center of view false showCursorTrackGuide Show a vertical line that follows the cursor false trackDefaults Embedded object defining default settings for specific track types (see table below). tracks Array of configuration objects defining tracks initially displayed when app launches. roi Array of track-like configuration objects defining regions of interest. These regions will be overlaid on all tracks. oauthToken oauth access token apiKey Google API key. Optional clientId Google client ID. Optional. genomeList An array of genome json objects, or url to an array of genome json objects. If present genomes can be specified by id with the genome field above. This list is added to the igv.js default list unless loadDefaultGenomes: false loadDefaultGenomes Boolean indicating whether or not the igv.js default genome list should be loaded. Currently this list is loaded from true nucleotideColors Color table for nucleotides in sequence an bam tracks. Object with keys \"A\", \"C\", \"T\", \"G\", and \"N\" showSampleNames Controls display of sample names for track types that support them (VCF with genotypes, SEG, and MUT) sampleinfo Sample information can be included in browser configuration as an array of sample info objects","title":"Browser configuration options"},{"location":"Browser-Creation/#search-object-details","text":"The search object defines a webservice for fetching genomic location given a gene name or other symbol. The service should return a JSON object with the following structure. The results array is an array of objects with a chromosome, start, and end field. The names of these fields are specified in the configuration object. The end field is optional, if not included end = start + 1. { <resultsField> : <array of results> } Option Description Default url URL to search service. The URL must include the string $FEATURE$ . This string will be replaced by the symbol being queried. if the URL contains the string $GENOME$ is will be replaced by the current genome ID. resultsField JSON field name for property containing the array of results. Treats the response as an array of results. coords Indicates genomic coordinate convention used. Possible values are 0 and 1 1 chromosomeField JSON field name for the chromosome property chromosome startField JSON field name for the start position property start endField JSON field name for the end position property end The results array contain objects with chromosome, start, and end fields named as specified above. The type of the chromosome field is string, the type of start and end fields is integer. E.g. a search for TP53 against hg19 using the defaults should look like this: [{\"chromosome\":\"chr17\",\"start\":7572927,\"end\":7579912}]","title":"search object details"},{"location":"Browser-Creation/#browser-removal","text":"To remove an igv browser instance call igv.removeBrowser(browser) To remove all igv browsers igv.removeAllBrowsers()","title":"Browser removal"},{"location":"Data-Server-Requirements/","text":"In general, servers hosting data for use by igv.js must support HTTP Range headers and Cross-Origin Resource Sharing (CORS). We use Apache servers as well as Amazon S3 buckets, but most popular servers can be configured to support these requirements. Range requests # For indexed files, the data are retrieved on demand as needed for display. To support this, the data web server must support HTTP Range requests in order to allow retrieval of a subset of the data in the file. Many production web servers support Range headers by default. Some servers, e.g. Flask, may require configuration settings to add support. Cross-Origin Resource Sharing (CORS) # Data served over HTTP/HTTPS to igv.js, or any other JavaScript application, must include CORS headers unless the data file is served from the same host as the web page containing the JavaScript application. For a good introduction to CORS see https://www.html5rocks.com/en/tutorials/cors/ . As an example, below are the settings used for our test Apache server. Note that these might not be appropriate for your data server. These settings are configured in an .htaccess file. For details on setting response headers for your server, see the server documentation. <IfModule mod_headers.c> Header set Access-Control-Allow-Origin \"*\" Header set Access-Control-Allow-Methods: \"GET,POST,PUT,OPTIONS\" Header set Access-Control-Allow-Headers: \"RANGE, Cache-control, If-None-Match, Content-Type\" Header set Access-Control-Expose-Headers: \"Content-Length, Content-Range, Content-Type\" </IfModule> If serving data from an Amazon S3 bucket, CORS headers can be figured as a property of the bucket. See Amazon documentation for details. For our public test data, the headers are configured as follows: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>HEAD</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <ExposeHeader>Content-Length</ExposeHeader> <ExposeHeader>Content-Type</ExposeHeader> <ExposeHeader>Content-Range</ExposeHeader> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration> BAM Mime Type # In some cases it might be necessary to explicitly define a mime type for \".bam\" files when using an Apache server. If you encounter errors such as \"invalid stored block length\" or \"invalid block type\" when accessing a .bam file check the response headers for \"Content-encoding: gzip\". If this header is present you will need to explicitly define a mime type for the .bam extension. This can be done in httpd.conf as follows AddType application/octet-stream .bam","title":"Data server requirements"},{"location":"Data-Server-Requirements/#range-requests","text":"For indexed files, the data are retrieved on demand as needed for display. To support this, the data web server must support HTTP Range requests in order to allow retrieval of a subset of the data in the file. Many production web servers support Range headers by default. Some servers, e.g. Flask, may require configuration settings to add support.","title":"Range requests"},{"location":"Data-Server-Requirements/#cross-origin-resource-sharing-cors","text":"Data served over HTTP/HTTPS to igv.js, or any other JavaScript application, must include CORS headers unless the data file is served from the same host as the web page containing the JavaScript application. For a good introduction to CORS see https://www.html5rocks.com/en/tutorials/cors/ . As an example, below are the settings used for our test Apache server. Note that these might not be appropriate for your data server. These settings are configured in an .htaccess file. For details on setting response headers for your server, see the server documentation. <IfModule mod_headers.c> Header set Access-Control-Allow-Origin \"*\" Header set Access-Control-Allow-Methods: \"GET,POST,PUT,OPTIONS\" Header set Access-Control-Allow-Headers: \"RANGE, Cache-control, If-None-Match, Content-Type\" Header set Access-Control-Expose-Headers: \"Content-Length, Content-Range, Content-Type\" </IfModule> If serving data from an Amazon S3 bucket, CORS headers can be figured as a property of the bucket. See Amazon documentation for details. For our public test data, the headers are configured as follows: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>HEAD</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <ExposeHeader>Content-Length</ExposeHeader> <ExposeHeader>Content-Type</ExposeHeader> <ExposeHeader>Content-Range</ExposeHeader> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration>","title":"Cross-Origin Resource Sharing (CORS)"},{"location":"Data-Server-Requirements/#bam-mime-type","text":"In some cases it might be necessary to explicitly define a mime type for \".bam\" files when using an Apache server. If you encounter errors such as \"invalid stored block length\" or \"invalid block type\" when accessing a .bam file check the response headers for \"Content-encoding: gzip\". If this header is present you will need to explicitly define a mime type for the .bam extension. This can be done in httpd.conf as follows AddType application/octet-stream .bam","title":"BAM Mime Type"},{"location":"Data-URIs/","text":"Many track types support a data URI in the url fields. The data uri contains the compressed, uuencoded, content of a supported file type. Most file formats are supported, with the exception of bigwig, bigbed, and tdf. To produce a data URI from a data file gzip the data file, unless it is a bam file . base64 encode the contents of the gzipped or bam file do the following character replacements on the encoded string `encoded.replace(/\\+/g, '.').replace(/\\//g, '_').replace(/=/g, '-') construct a data URI as follows data:application/gzip;base64,<encoded string> See https://github.com/igvteam/igv.js-reports for a utility to produce self-contained html files with an embedded igv.js viewer using data URIs.","title":"Data URIs"},{"location":"Development/","text":"Development # Requirements # Building igv.js and running the examples require Linux or MacOS. Other Unix environments will probably work but have not been tested. Windows users can use Windows Subsystem for Linux . Building # Building igv.js and running the examples requires node.js . git clone https://github.com/igvteam/igv.js.git cd igv.js npm install npm run build This creates a dist folder with the following files igv.js - UMDS file for script include, AMD, or CJS modules. A script include will define an \"igv\" global. igv.min.js - minified version of igv.js igv.esm.js -- ES6 module igv.esm.min.js -- minified version of igv.esm.js Tests # To run the tests from the command line npm run test Examples # To run the examples install http-server . Start http-server from the project root directory npx http-server Then open http://localhost:8080/examples in a web browser. Supported Browsers # igv.js require a modern web browser with support for Javascript ECMAScript 2015 (ES6). License # igv.js is MIT licensed.","title":"Development"},{"location":"Development/#development","text":"","title":"Development"},{"location":"Development/#requirements","text":"Building igv.js and running the examples require Linux or MacOS. Other Unix environments will probably work but have not been tested. Windows users can use Windows Subsystem for Linux .","title":"Requirements"},{"location":"Development/#building","text":"Building igv.js and running the examples requires node.js . git clone https://github.com/igvteam/igv.js.git cd igv.js npm install npm run build This creates a dist folder with the following files igv.js - UMDS file for script include, AMD, or CJS modules. A script include will define an \"igv\" global. igv.min.js - minified version of igv.js igv.esm.js -- ES6 module igv.esm.min.js -- minified version of igv.esm.js","title":"Building"},{"location":"Development/#tests","text":"To run the tests from the command line npm run test","title":"Tests"},{"location":"Development/#examples","text":"To run the examples install http-server . Start http-server from the project root directory npx http-server Then open http://localhost:8080/examples in a web browser.","title":"Examples"},{"location":"Development/#supported-browsers","text":"igv.js require a modern web browser with support for Javascript ECMAScript 2015 (ES6).","title":"Supported Browsers"},{"location":"Development/#license","text":"igv.js is MIT licensed.","title":"License"},{"location":"Events/","text":"Browser events # IGV provides a simple event system to listen for user interactions. Event handlers can be attached to the \"Browser\" object with the on function browser.on(event, handler) browser.off(event) event (String) - the event type, see below handler (function) - handler function for the event. The function may be passed data as described below Event type Description Data trackremoved Called when one or more tracks are removed, either by the user or through the API. See track-reorder.html . Array of track objects removed trackdrag Called repeatedly while the user pans the genome view. Warning this event can trigger many calls trackdragend Called upon completion of of a drag (horizontal pan). locuschange Called when the genome locus is changed. Note, as with trackdrag this event can trigger many calls. See locus-change.html Array of ReferenceFrame objects, or for versions < 2.10.0 a single ReferenceFrame (see below). In multi-locus view the array contains a ReferenceFrame for each viewport. trackclick Called when the user clicks on a feature in a track. This event can be used to customized the igv popover window that displays information about the feature, or to take some other custom action. To customize the popover window the callback function should return a string of valid html to be displayed (see custom-track-popover.html ). To prevent the igv popover window from displaying return false (see custom-track-click.html ) popupData (see below) trackorderchanged Called when the track order changes ordered array of track names ReferenceFrame # Object specifying the genome range of the current view. { chr : string start: number (\"0\" based coordinates) end: number getLocusString(): function - return a representation of the form ```chr:start-end```, where start is in \"1\" based coordinates } popupData # Array of properties for feature clicked as name/value pairs [{name, value}, {name, value}, ...] Example # browser.on('locuschange', function (referenceFrame) { window.location.replace(HASH_PREFIX + referenceFrame.label); }); Track events # Experimental -- not released and subject to change or removal # track.on(event, handler) event (String) - the event type, see below handler (function) - handler function for the event. The function may be passed data as described below Event type Description Data action Triggered on an explicit user action, usually from a menu. Only a subset of actions are supported, see table below. See user action table below User actions # Action Description Data sort Sort track data. Supported by alignment and seg tracks, no-op for other track types sortObject setcolor Set the track color color-string (e.g. rgb(0,0,150) setAltColor Set the \"alt\" color. Interpretation of alt color depends on the track type. color-string","title":"Events"},{"location":"Events/#browser-events","text":"IGV provides a simple event system to listen for user interactions. Event handlers can be attached to the \"Browser\" object with the on function browser.on(event, handler) browser.off(event) event (String) - the event type, see below handler (function) - handler function for the event. The function may be passed data as described below Event type Description Data trackremoved Called when one or more tracks are removed, either by the user or through the API. See track-reorder.html . Array of track objects removed trackdrag Called repeatedly while the user pans the genome view. Warning this event can trigger many calls trackdragend Called upon completion of of a drag (horizontal pan). locuschange Called when the genome locus is changed. Note, as with trackdrag this event can trigger many calls. See locus-change.html Array of ReferenceFrame objects, or for versions < 2.10.0 a single ReferenceFrame (see below). In multi-locus view the array contains a ReferenceFrame for each viewport. trackclick Called when the user clicks on a feature in a track. This event can be used to customized the igv popover window that displays information about the feature, or to take some other custom action. To customize the popover window the callback function should return a string of valid html to be displayed (see custom-track-popover.html ). To prevent the igv popover window from displaying return false (see custom-track-click.html ) popupData (see below) trackorderchanged Called when the track order changes ordered array of track names","title":"Browser events"},{"location":"Events/#referenceframe","text":"Object specifying the genome range of the current view. { chr : string start: number (\"0\" based coordinates) end: number getLocusString(): function - return a representation of the form ```chr:start-end```, where start is in \"1\" based coordinates }","title":"ReferenceFrame"},{"location":"Events/#popupdata","text":"Array of properties for feature clicked as name/value pairs [{name, value}, {name, value}, ...]","title":"popupData"},{"location":"Events/#example","text":"browser.on('locuschange', function (referenceFrame) { window.location.replace(HASH_PREFIX + referenceFrame.label); });","title":"Example"},{"location":"Events/#track-events","text":"","title":"Track events"},{"location":"Events/#experimental-not-released-and-subject-to-change-or-removal","text":"track.on(event, handler) event (String) - the event type, see below handler (function) - handler function for the event. The function may be passed data as described below Event type Description Data action Triggered on an explicit user action, usually from a menu. Only a subset of actions are supported, see table below. See user action table below","title":"Experimental -- not released and subject to change or removal"},{"location":"Events/#user-actions","text":"Action Description Data sort Sort track data. Supported by alignment and seg tracks, no-op for other track types sortObject setcolor Set the track color color-string (e.g. rgb(0,0,150) setAltColor Set the \"alt\" color. Interpretation of alt color depends on the track type. color-string","title":"User actions"},{"location":"OAuth/","text":"This section describes support for OAuth access tokens. Special thanks to @vrockai for his significant contributions here. Files provided behind an OAuth secured endpoint need a bearer access token to be accessed. The access token can be provided as a string, a function, a promise, or a function that returns a promise. Setting the token in the track configuration # As a function returning the token string itself or a promise: { \"name\": \"Phase 3 WGS variants\", \"format\": \"vcf\", \"url\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi\", \"type\": \"variant\", \"oauthToken\": myOauthTokenFn } As a string: { \"name\": \"Phase 3 WGS variants\", \"format\": \"vcf\", \"url\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi\", \"type\": \"variant\", \"oauthToken\": \"F0jh9korTyzd9kaZqZ0SzjKZuS3ut0i4P4234352m2JYHiLIcqzFAumpyxshU9mMQ13gJHtxD2fy\" } The function approach (1.) is preferred because it's a safe way how to provide up-to-date token to the igv.js browser all the time. The value approach (2.) will work only for a life of the token and the browser would need to be refreshed after the token is expired. The function approach works out of the box with promises. The myOauthTokenFn could look like this: function myOauthTokenFn() { return $http.get(myOauthEndpointURL).then(parseAccessToken); } Setting the token globally # To set a token for all requests to a particular host or hosts igv.setOauthToken(accessToken, \"*foobar*\"); The above example will include the supplied bearer access token with every request to hosts matching the string \" foobar \", for example \"foobar.data.org\". As illustrated in the track configuration examples accessToken can be a string, function, or promise. Setting a Google access token # For Google resources (Google Cloud Storage and Google Drive) the oAuth access token can alternatively be set globally as shown below. The token will be added as an Authorization header to all requests to google servers. The test for google server is host name matches googleapis or protocol is gs://. igv.setGoogleOauthToken(accessToken)","title":"Oauth"},{"location":"OAuth/#setting-the-token-in-the-track-configuration","text":"As a function returning the token string itself or a promise: { \"name\": \"Phase 3 WGS variants\", \"format\": \"vcf\", \"url\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi\", \"type\": \"variant\", \"oauthToken\": myOauthTokenFn } As a string: { \"name\": \"Phase 3 WGS variants\", \"format\": \"vcf\", \"url\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi\", \"type\": \"variant\", \"oauthToken\": \"F0jh9korTyzd9kaZqZ0SzjKZuS3ut0i4P4234352m2JYHiLIcqzFAumpyxshU9mMQ13gJHtxD2fy\" } The function approach (1.) is preferred because it's a safe way how to provide up-to-date token to the igv.js browser all the time. The value approach (2.) will work only for a life of the token and the browser would need to be refreshed after the token is expired. The function approach works out of the box with promises. The myOauthTokenFn could look like this: function myOauthTokenFn() { return $http.get(myOauthEndpointURL).then(parseAccessToken); }","title":"Setting the token in the track configuration"},{"location":"OAuth/#setting-the-token-globally","text":"To set a token for all requests to a particular host or hosts igv.setOauthToken(accessToken, \"*foobar*\"); The above example will include the supplied bearer access token with every request to hosts matching the string \" foobar \", for example \"foobar.data.org\". As illustrated in the track configuration examples accessToken can be a string, function, or promise.","title":"Setting the token globally"},{"location":"OAuth/#setting-a-google-access-token","text":"For Google resources (Google Cloud Storage and Google Drive) the oAuth access token can alternatively be set globally as shown below. The token will be added as an Authorization header to all requests to google servers. The test for google server is host name matches googleapis or protocol is gs://. igv.setGoogleOauthToken(accessToken)","title":"Setting a Google access token"},{"location":"Query-Parameters/","text":"Query Parameters An igv.js instance can be initialized on page load with query parameters. To enable use of query parameters set supportQueryParameters: true in the browser configuration. All query parameter values must be URI Encoded. Parameter Description genome reference genome id. See list of hosted genomes above. locus initial locus, e.g. chr1:100-200. For multi-locus view use percent encoding for space, (%20) to separate loci, e.g. chr1%20chr2. file comma-delimited list of data file URLs. sessionURL URL to a json or IGV desktop session file, or a base 64 encoded blob object obtained from browser.compressedSession() . See examples below. Note if sessionURL is provided genome, locus, and file parameters are ignored. Examples # The examples below use the igv web app (igv.org/app), which embeds igv.js. Replace https://igv.org/app/ with the URL to your app. You must enable query paramters for the embedded igv.js in the configuration file. Load a bam file and view the region for the gene myc . # https://igv.org/app/?genome=hg19&locus=myc&file=https%3A%2F%2F1000genomes.s3.amazonaws.com%2Fphase3%2Fdata%2FHG01879%2Fexome_alignment%2FHG01879.mapped.ILLUMINA.bwa.ACB.exome.20120522.bam Load an IGV desktop (xml) session # https://igv.org/app/?sessionURL=https%3A%2F%2Fwww.dropbox.com%2Fs%2Fi28zsloz8b75b1g%2Falignments_session.xml%3Fdl%3D0 Load a session as a compressed blob parameter # https://igv.org/app/?sessionURL=blob:tZRRa9swEMe_StHTxhzZjpLa8WM7SAfbS9oxxghBts.OmCVlkpykDfnuPbl2WFlXtpaGEMLd6X66u__pQAxUYEAVQLIDESXJyLpmKQmI4hJt5KqVXJ29my8u1ywNve89OituHf.6.OzDndvYLAwto2XLG7QXP2lrR4Aho5hyye.04jtLCy1DUW9pbjQvhbJOuNYB1aYOa1Bagg0t_OoQ3Q.tOJKEKmH_9iT8CqQVt07nXJUvBCKBDoQuO1dKO.6EVjb0uS8w96cSNHV7R.s7cgxIo4vWkuwHKdYmzeJxEiRsEkzYZNT9n7BgNo3JMiC1g_01NFB06fy4nj2BfryKH.GX75dYmlUbkqm2aY4IdQZL8dQDcbcbH4QNaTsZBESbEgzJsMJklpzPWMwm6fmYxdMEPrAoRWno641Qygc508IxOJzUMo.iOBpjktY0_9vBOIqioXsldzzss4W8EbWSoNxgobxxq3yHTLl6UObHKzqO4mmUxCmdXyxoo3erQm_B8BpoYbh8hZTe9F7.xyuv0kZyh1frL9uP5YTwIaKBx31.WR.sbk0BNw8AnxRtaxD1GvEsinAL.gM3XiVXvWeKjl4Z7DkJLKBCLZ3NUXv297rwoen0.CJpPLlcmNFTqNXGQTms1OuejH.DUJf7mW2FFblohLv9hky98zsTYKFSb3mObc0qRMKpbV5H.PmjeY8m.7einhraoJHTI4M2yfcLvcPVnnoSBjow_tTwxGipLVaHkd00lsfl8R4- Note the blob can be obtained from an igv.js browser instance as follows. See Browser API . const blob = browser.compressedSession()","title":"Query parameters"},{"location":"Query-Parameters/#examples","text":"The examples below use the igv web app (igv.org/app), which embeds igv.js. Replace https://igv.org/app/ with the URL to your app. You must enable query paramters for the embedded igv.js in the configuration file.","title":"Examples"},{"location":"Query-Parameters/#load-a-bam-file-and-view-the-region-for-the-gene-myc","text":"https://igv.org/app/?genome=hg19&locus=myc&file=https%3A%2F%2F1000genomes.s3.amazonaws.com%2Fphase3%2Fdata%2FHG01879%2Fexome_alignment%2FHG01879.mapped.ILLUMINA.bwa.ACB.exome.20120522.bam","title":"Load a bam file and view the region for the gene myc."},{"location":"Query-Parameters/#load-an-igv-desktop-xml-session","text":"https://igv.org/app/?sessionURL=https%3A%2F%2Fwww.dropbox.com%2Fs%2Fi28zsloz8b75b1g%2Falignments_session.xml%3Fdl%3D0","title":"Load an IGV desktop (xml) session"},{"location":"Query-Parameters/#load-a-session-as-a-compressed-blob-parameter","text":"https://igv.org/app/?sessionURL=blob:tZRRa9swEMe_StHTxhzZjpLa8WM7SAfbS9oxxghBts.OmCVlkpykDfnuPbl2WFlXtpaGEMLd6X66u__pQAxUYEAVQLIDESXJyLpmKQmI4hJt5KqVXJ29my8u1ywNve89OituHf.6.OzDndvYLAwto2XLG7QXP2lrR4Aho5hyye.04jtLCy1DUW9pbjQvhbJOuNYB1aYOa1Bagg0t_OoQ3Q.tOJKEKmH_9iT8CqQVt07nXJUvBCKBDoQuO1dKO.6EVjb0uS8w96cSNHV7R.s7cgxIo4vWkuwHKdYmzeJxEiRsEkzYZNT9n7BgNo3JMiC1g_01NFB06fy4nj2BfryKH.GX75dYmlUbkqm2aY4IdQZL8dQDcbcbH4QNaTsZBESbEgzJsMJklpzPWMwm6fmYxdMEPrAoRWno641Qygc508IxOJzUMo.iOBpjktY0_9vBOIqioXsldzzss4W8EbWSoNxgobxxq3yHTLl6UObHKzqO4mmUxCmdXyxoo3erQm_B8BpoYbh8hZTe9F7.xyuv0kZyh1frL9uP5YTwIaKBx31.WR.sbk0BNw8AnxRtaxD1GvEsinAL.gM3XiVXvWeKjl4Z7DkJLKBCLZ3NUXv297rwoen0.CJpPLlcmNFTqNXGQTms1OuejH.DUJf7mW2FFblohLv9hky98zsTYKFSb3mObc0qRMKpbV5H.PmjeY8m.7einhraoJHTI4M2yfcLvcPVnnoSBjow_tTwxGipLVaHkd00lsfl8R4- Note the blob can be obtained from an igv.js browser instance as follows. See Browser API . const blob = browser.compressedSession()","title":"Load a session as a compressed blob parameter"},{"location":"QuickStart/","text":"Installation # igv.js consists of a single javascript file with no external dependencies. Pre-built files for script include, AMD, or CJS module systems (igv.min.js) and an ES6 module (igv.esm.min.js) can be downloaded from https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/ . To import igv as an ES6 module import igv from \"https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/igv.esm.min.js\" Or as a script include (defines the \"igv\" global) <script src=\"https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/igv.min.js\"></script> Alternatively you can install with npm npm install igv and source the appropriate file for your module system (igv.min.js or igv.esm.min.js) in node_modules/igv/dist. Usage # To create an igv.js browser supply a container div and an initial configuration defining the reference genome, initial tracks, and other state to the function igv.createBrowser(div, config) . This function returns a promise for an igv.Browser object which can used to control the browser. For example, to open an igv.js browser with an alignment track opened at a specific locus: const igvDiv = document.getElementById(\"igv-div\") const options = { genome: \"hg38\", locus: \"chr8:127,736,588-127,739,371\", tracks: [ { \"name\": \"HG00103\", \"url\": \"https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram.crai\", \"format\": \"cram\" } ] } const browser = await igv.createBrowser(igvDiv, options) More # Browser creation Browser API Tracks","title":"Quickstart"},{"location":"QuickStart/#installation","text":"igv.js consists of a single javascript file with no external dependencies. Pre-built files for script include, AMD, or CJS module systems (igv.min.js) and an ES6 module (igv.esm.min.js) can be downloaded from https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/ . To import igv as an ES6 module import igv from \"https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/igv.esm.min.js\" Or as a script include (defines the \"igv\" global) <script src=\"https://cdn.jsdelivr.net/npm/igv@3.0.2/dist/igv.min.js\"></script> Alternatively you can install with npm npm install igv and source the appropriate file for your module system (igv.min.js or igv.esm.min.js) in node_modules/igv/dist.","title":"Installation"},{"location":"QuickStart/#usage","text":"To create an igv.js browser supply a container div and an initial configuration defining the reference genome, initial tracks, and other state to the function igv.createBrowser(div, config) . This function returns a promise for an igv.Browser object which can used to control the browser. For example, to open an igv.js browser with an alignment track opened at a specific locus: const igvDiv = document.getElementById(\"igv-div\") const options = { genome: \"hg38\", locus: \"chr8:127,736,588-127,739,371\", tracks: [ { \"name\": \"HG00103\", \"url\": \"https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram\", \"indexURL\": \"https://s3.amazonaws.com/1000genomes/data/HG00103/alignment/HG00103.alt_bwamem_GRCh38DH.20150718.GBR.low_coverage.cram.crai\", \"format\": \"cram\" } ] } const browser = await igv.createBrowser(igvDiv, options)","title":"Usage"},{"location":"QuickStart/#more","text":"Browser creation Browser API Tracks","title":"More"},{"location":"Reference-Genome/","text":"Genome In igv.js a genome refers to a reference sequence and, optionally, one or more associated tracks and metadata such as chromosome aliases and chromosome cytobands. The reference genome can be defined with either the genome or reference property. One of these options is required. genome property # The genome property specifies a reference genome by an identifier for either (1) an IGV hosted genome definition, or (2) a UCSC GenArk assembly. Example - IGV hosted genome { ... genome: \"hg38\", ... } Example - UCSC GenArk assembly { ... genome: \"GCA_000002305.1\" ... } IGV hosts a limited number of genome assemblies, which are listed in the table below. The UCSC GenArk site hosts an extensive list of assembly hubs, currenlty numbering 4,247. The complete listing can be found here . IGV Hosted Genomes id name hs1 Human (T2T CHM13-v2.0/hs1) chm13v1.1 Human (T2T CHM13-v1.1) hg38 Human (GRCh38/hg38) hg38_1kg Human (hg38 1kg/GATK) hg19 Human (GRCh37/hg19) hg18 Human (hg18) mm39 Mouse (GRCm39/mm39) mm10 Mouse (GRCm38/mm10) mm9 Mouse (NCBI37/mm9) rn7 Rat (rn7) rn6 Rat (RGCS 6.0/rn6) gorGor6 Gorilla (Kamilah_GGO_v0/gorGor6) gorGor4 Gorilla (gorGor4.1/gorGor4) panTro6 Chimp (panTro6) (panTro6) panTro5 Chimp (panTro5) (panTro5) panTro4 Chimp (SAC 2.1.4/panTro4) macFas5 Macaca fascicularis (macFas5) GCA_011100615.1 Macaca fascicularis 6.0 (GCA_011100615.1) panPan2 Bonobo (MPI-EVA panpan1.1/panPan2) canFam3 Dog (Broad CanFam3.1/canFam3) canFam4 Dog (UU_Cfam_GSD_1.0/canFam4) canFam5 Dog (canFam5) bosTau9 Cow (ARS-UCD1.2/bosTau9) bosTau8 Cow (UMD_3.1.1/bosTau8) susScr11 Pig (SGSC Sscrofa11.1/susScr11) galGal6 Chicken (galGal6) GCF_016699485.2 Gallus gallus (GCF_016699485.2) danRer11 Zebrafish (GRCZ11/danRer11) danRer10 Zebrafish (GRCZ10/danRer10) ce11 C. elegans (ce11) dm6 D. melanogaster (dm6) dm3 D. melanogaster (dm3) dmel_r5.9 D. melanogaster (dmel_r5.9) sacCer3 S. cerevisiae (sacCer3) ASM294v2 S. pombe (ASM294v2) ASM985889v3 Sars-CoV-2 (ASM985889v3) tair10 A. thaliana (TAIR 10) GCA_003086295.2 Peanut (GCA_003086295.2) GCF_001433935.1 O. sativa IRGSP-1.0 (GCF_001433935.1) NC_016856.1 Salmonella enterica subsp. enterica serovar Typhimurium str. 14028S GCA_000182895.1 Coprinopsis cinerea okayama7#130 (GCA_000182895.1) reference object # To define or customize a reference genome the reference property can be used. example # { reference: { \"id\": \"hg38\", \"name\": \"Human (GRCh38/hg38)\", \"fastaURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai\", \"cytobandURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt\", \"tracks\": [ { \"name\": \"Refseq Genes\", \"url\": \"https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz\", \"order\": 1000000, \"indexed\": false } ] } } details # All properties except a reference sequence URL (fastaURL or twoBitURL) are optional. An index is highly recommended for fasta files if the sequence is > a few mb in size. Loading a large fasta file without an index is likely to freeze the browser. In total there are 4 options for defining the reference sequence: Fasta file without index, useful for small (< 10 MB) sequences. fastaURL Indexed fasta file. fastaURL, indexURL BGZIPPED compressed fasta file. fastaURL, indexURL, compressedIndexURL UCSC two bit sequence file (see [twobit]). (https://genome.ucsc.edu/goldenPath/help/twoBit.html). twoBitURL Option Description Default id UCSC or other id string. name A descriptive name. fastaURL URL to a FASTA file. Either fastaURL or twoBitURL is required . indexURL URL to a FASTA index (.fai file). An index file is optional, but if not supplied the entire fasta is read. compressedIndexURL URL to a BGZIPPED compressed fasta file (.gzi index). Note this is in addition, not in place, of the .fai index. twoBitURL URL to a UCSC two-bit sequence file (Version 3.0). Required if fastaURL is not defined. If both fastaURL and twoBitURL are defined twoBitURL will be used for igv.js version >= 3.0, fastaURL for earlier igv.js versions. cytobandURL URL to a cytoband ideogram file in UCSC format. Optional aliasURL URL to a tab-delimited file defining aliases for chromosome names. Theformat is tab delimited with 1 line per chromosome. Each line begins with the canonical chromosome followed by aliases. See the example below. Optional chromSizesURL URL to a UCSC .chrom.sizes file. This can be used in combination with twoBitURL to support the whole genome view. indexed Flag indicating if the FASTA is indexed. Ignored if indexURL is supplied. The primary purpose of this property is to indicate that the fasta is not indexed. Deprecated as of Version 3.0 tracks A list of tracks to be loaded with the genome. See the tracks description for details. Optional chromosomeOrder An array of chromosome names defining the order in the whole genome view and chromosome pulldown selector, if used. Optional headers HTTP headers to include with each request. For example {\"authorization\": \"bearer: token\"}. Optional wholeGenomeView Construct a \"whole genome\" view from the individual sequences. This is useful for finished assemblies with a few (< 50) large chromosomes. Its not useful for assemblies with a single or conversely thousands of sequences. Optional true Chromosome alias example # Below is the contents of a chromosome alias file. chr1 1 CM000663.2 NC_000001.11 chr2 2 CM000664.2 NC_000002.12 chr3 3 CM000665.2 NC_000003.12 chr4 4 CM000666.2 NC_000004.12 chr5 5 CM000667.2 NC_000005.10 chr6 6 CM000668.2 NC_000006.12 chr7 7 CM000669.2 NC_000007.14 chr8 8 CM000670.2 NC_000008.11 chr9 9 CM000671.2 NC_000009.12 chr10 10 CM000672.2 NC_000010.11 chr11 11 CM000673.2 NC_000011.10 chr12 12 CM000674.2 NC_000012.12 chr13 13 CM000675.2 NC_000013.11 chr14 14 CM000676.2 NC_000014.9 chr15 15 CM000677.2 NC_000015.10 chr16 16 CM000678.2 NC_000016.10 chr17 17 CM000679.2 NC_000017.11 chr18 18 CM000680.2 NC_000018.10 chr19 19 CM000681.2 NC_000019.10 chr20 20 CM000682.2 NC_000020.11 chr21 21 CM000683.2 NC_000021.9 chr22 22 CM000684.2 NC_000022.11 chrX X CM000685.2 NC_000023.11 23 chrY Y CM000686.2 NC_000024.10 24 chrM MT J01415.2 NC_012920.1 chrMT","title":"Reference genome"},{"location":"Reference-Genome/#genome-property","text":"The genome property specifies a reference genome by an identifier for either (1) an IGV hosted genome definition, or (2) a UCSC GenArk assembly. Example - IGV hosted genome { ... genome: \"hg38\", ... } Example - UCSC GenArk assembly { ... genome: \"GCA_000002305.1\" ... } IGV hosts a limited number of genome assemblies, which are listed in the table below. The UCSC GenArk site hosts an extensive list of assembly hubs, currenlty numbering 4,247. The complete listing can be found here . IGV Hosted Genomes id name hs1 Human (T2T CHM13-v2.0/hs1) chm13v1.1 Human (T2T CHM13-v1.1) hg38 Human (GRCh38/hg38) hg38_1kg Human (hg38 1kg/GATK) hg19 Human (GRCh37/hg19) hg18 Human (hg18) mm39 Mouse (GRCm39/mm39) mm10 Mouse (GRCm38/mm10) mm9 Mouse (NCBI37/mm9) rn7 Rat (rn7) rn6 Rat (RGCS 6.0/rn6) gorGor6 Gorilla (Kamilah_GGO_v0/gorGor6) gorGor4 Gorilla (gorGor4.1/gorGor4) panTro6 Chimp (panTro6) (panTro6) panTro5 Chimp (panTro5) (panTro5) panTro4 Chimp (SAC 2.1.4/panTro4) macFas5 Macaca fascicularis (macFas5) GCA_011100615.1 Macaca fascicularis 6.0 (GCA_011100615.1) panPan2 Bonobo (MPI-EVA panpan1.1/panPan2) canFam3 Dog (Broad CanFam3.1/canFam3) canFam4 Dog (UU_Cfam_GSD_1.0/canFam4) canFam5 Dog (canFam5) bosTau9 Cow (ARS-UCD1.2/bosTau9) bosTau8 Cow (UMD_3.1.1/bosTau8) susScr11 Pig (SGSC Sscrofa11.1/susScr11) galGal6 Chicken (galGal6) GCF_016699485.2 Gallus gallus (GCF_016699485.2) danRer11 Zebrafish (GRCZ11/danRer11) danRer10 Zebrafish (GRCZ10/danRer10) ce11 C. elegans (ce11) dm6 D. melanogaster (dm6) dm3 D. melanogaster (dm3) dmel_r5.9 D. melanogaster (dmel_r5.9) sacCer3 S. cerevisiae (sacCer3) ASM294v2 S. pombe (ASM294v2) ASM985889v3 Sars-CoV-2 (ASM985889v3) tair10 A. thaliana (TAIR 10) GCA_003086295.2 Peanut (GCA_003086295.2) GCF_001433935.1 O. sativa IRGSP-1.0 (GCF_001433935.1) NC_016856.1 Salmonella enterica subsp. enterica serovar Typhimurium str. 14028S GCA_000182895.1 Coprinopsis cinerea okayama7#130 (GCA_000182895.1)","title":"genome property"},{"location":"Reference-Genome/#reference-object","text":"To define or customize a reference genome the reference property can be used.","title":"reference object"},{"location":"Reference-Genome/#example","text":"{ reference: { \"id\": \"hg38\", \"name\": \"Human (GRCh38/hg38)\", \"fastaURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai\", \"cytobandURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt\", \"tracks\": [ { \"name\": \"Refseq Genes\", \"url\": \"https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz\", \"order\": 1000000, \"indexed\": false } ] } }","title":"example"},{"location":"Reference-Genome/#details","text":"All properties except a reference sequence URL (fastaURL or twoBitURL) are optional. An index is highly recommended for fasta files if the sequence is > a few mb in size. Loading a large fasta file without an index is likely to freeze the browser. In total there are 4 options for defining the reference sequence: Fasta file without index, useful for small (< 10 MB) sequences. fastaURL Indexed fasta file. fastaURL, indexURL BGZIPPED compressed fasta file. fastaURL, indexURL, compressedIndexURL UCSC two bit sequence file (see [twobit]). (https://genome.ucsc.edu/goldenPath/help/twoBit.html). twoBitURL Option Description Default id UCSC or other id string. name A descriptive name. fastaURL URL to a FASTA file. Either fastaURL or twoBitURL is required . indexURL URL to a FASTA index (.fai file). An index file is optional, but if not supplied the entire fasta is read. compressedIndexURL URL to a BGZIPPED compressed fasta file (.gzi index). Note this is in addition, not in place, of the .fai index. twoBitURL URL to a UCSC two-bit sequence file (Version 3.0). Required if fastaURL is not defined. If both fastaURL and twoBitURL are defined twoBitURL will be used for igv.js version >= 3.0, fastaURL for earlier igv.js versions. cytobandURL URL to a cytoband ideogram file in UCSC format. Optional aliasURL URL to a tab-delimited file defining aliases for chromosome names. Theformat is tab delimited with 1 line per chromosome. Each line begins with the canonical chromosome followed by aliases. See the example below. Optional chromSizesURL URL to a UCSC .chrom.sizes file. This can be used in combination with twoBitURL to support the whole genome view. indexed Flag indicating if the FASTA is indexed. Ignored if indexURL is supplied. The primary purpose of this property is to indicate that the fasta is not indexed. Deprecated as of Version 3.0 tracks A list of tracks to be loaded with the genome. See the tracks description for details. Optional chromosomeOrder An array of chromosome names defining the order in the whole genome view and chromosome pulldown selector, if used. Optional headers HTTP headers to include with each request. For example {\"authorization\": \"bearer: token\"}. Optional wholeGenomeView Construct a \"whole genome\" view from the individual sequences. This is useful for finished assemblies with a few (< 50) large chromosomes. Its not useful for assemblies with a single or conversely thousands of sequences. Optional true","title":"details"},{"location":"Reference-Genome/#chromosome-alias-example","text":"Below is the contents of a chromosome alias file. chr1 1 CM000663.2 NC_000001.11 chr2 2 CM000664.2 NC_000002.12 chr3 3 CM000665.2 NC_000003.12 chr4 4 CM000666.2 NC_000004.12 chr5 5 CM000667.2 NC_000005.10 chr6 6 CM000668.2 NC_000006.12 chr7 7 CM000669.2 NC_000007.14 chr8 8 CM000670.2 NC_000008.11 chr9 9 CM000671.2 NC_000009.12 chr10 10 CM000672.2 NC_000010.11 chr11 11 CM000673.2 NC_000011.10 chr12 12 CM000674.2 NC_000012.12 chr13 13 CM000675.2 NC_000013.11 chr14 14 CM000676.2 NC_000014.9 chr15 15 CM000677.2 NC_000015.10 chr16 16 CM000678.2 NC_000016.10 chr17 17 CM000679.2 NC_000017.11 chr18 18 CM000680.2 NC_000018.10 chr19 19 CM000681.2 NC_000019.10 chr20 20 CM000682.2 NC_000020.11 chr21 21 CM000683.2 NC_000021.9 chr22 22 CM000684.2 NC_000022.11 chrX X CM000685.2 NC_000023.11 23 chrY Y CM000686.2 NC_000024.10 24 chrM MT J01415.2 NC_012920.1 chrMT","title":"Chromosome alias example"},{"location":"Regions-of-Interest/","text":"Regions of Interest A Region of Interest (ROI) is a specified genomic extent that can be configured to highlight a region displayed in the browser in one of two ways: A track is configured with one or more ROI sets to highlight regions in the track. The IGV browser is configured with one or more ROI sets to highlight regions across all tracks. An ROI appears visually as a translucent color overlay. It is configured using an roi property either (1) on the track property of the browser configuration, or (2) on the browser configuration. The roi property refers to an array of objects, each of which specifies a set of ROIs. Each object (set) is in a format identical to the annotation track configuration object format. Configuration Based ROIs # The following example defines both global and track-specific ROI sets. Full example is available here examples/roi/roi.html An roi property on the configuration specifies an array of two global ROI sets. The first set derives its ROIs from a URL, the send set from a feature list. An roi property on a track configuration specifies a track-specific ROI set. ROI sets can be defined from either features in an annotation file, such as a BED or GFF file, or features with properties {chr, start, end} specified explicitly in an array. const config = { genome: \"hg19\", // Global ROI sets roi: [ // 1. Global ROI set defined by features in a BED file { name: 'ROI set 1', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_1.bed', indexed: false, color: \"rgba(94,255,1,0.25)\" }, // 2. Global ROI set defined by explicitly specifying features in an array { name: \"ROI set 2\", color: \"rgba(3,52,249,0.25)\", features: [ { chr: \"chr1\", start: 67670000, end: 67671080 }, { chr: \"chr1\", start: 67672095, end: 67673993 } ] } ], // Track specific ROI set tracks: [ { name: 'Some features', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/some_features.bed', indexed: false, roi: [ { name: 'Track Based ROI Set', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_2.bed', indexed: false, color: \"rgba(255,1,199,0.25)\" }, ] } ] } Dynamically Loaded ROIs # A list of global ROI sets can be loaded dynamically at runtime with the browser function `loadROI(config) . As in the example above, the features can be specified as either a URL to an annotation file, or as an explicit array. const dynamic_roi_config = [ { color: \"rgba(237,72,155,0.72)\", features: [ { chr: \"chr1\", start: 67655415, end: 67655611 }, { chr: \"chr1\", start: 67664225, end: 67666281 } ] } ] browser.loadROI(dynamic_roi_config) User Defined ROIs # As of igv.js version 2.13.0, users can interactively create global ROIs by sweeping out extents on the ruler area while holding down the Shift key. Interactively defined ROIs can be removed, or assigned an extension, through a popup menu accssed by clicking on the region header. The Browser API function getUserDefinedROIs() returns a promise to return user defined regions as an array of features. clearROIs() # All global ROIs can be removed by calling browser.clearROIs() .","title":"Regions of Interest"},{"location":"Regions-of-Interest/#configuration-based-rois","text":"The following example defines both global and track-specific ROI sets. Full example is available here examples/roi/roi.html An roi property on the configuration specifies an array of two global ROI sets. The first set derives its ROIs from a URL, the send set from a feature list. An roi property on a track configuration specifies a track-specific ROI set. ROI sets can be defined from either features in an annotation file, such as a BED or GFF file, or features with properties {chr, start, end} specified explicitly in an array. const config = { genome: \"hg19\", // Global ROI sets roi: [ // 1. Global ROI set defined by features in a BED file { name: 'ROI set 1', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_1.bed', indexed: false, color: \"rgba(94,255,1,0.25)\" }, // 2. Global ROI set defined by explicitly specifying features in an array { name: \"ROI set 2\", color: \"rgba(3,52,249,0.25)\", features: [ { chr: \"chr1\", start: 67670000, end: 67671080 }, { chr: \"chr1\", start: 67672095, end: 67673993 } ] } ], // Track specific ROI set tracks: [ { name: 'Some features', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/some_features.bed', indexed: false, roi: [ { name: 'Track Based ROI Set', url: 'https://s3.amazonaws.com/igv.org.test/data/roi/roi_bed_2.bed', indexed: false, color: \"rgba(255,1,199,0.25)\" }, ] } ] }","title":"Configuration Based ROIs"},{"location":"Regions-of-Interest/#dynamically-loaded-rois","text":"A list of global ROI sets can be loaded dynamically at runtime with the browser function `loadROI(config) . As in the example above, the features can be specified as either a URL to an annotation file, or as an explicit array. const dynamic_roi_config = [ { color: \"rgba(237,72,155,0.72)\", features: [ { chr: \"chr1\", start: 67655415, end: 67655611 }, { chr: \"chr1\", start: 67664225, end: 67666281 } ] } ] browser.loadROI(dynamic_roi_config)","title":"Dynamically Loaded ROIs"},{"location":"Regions-of-Interest/#user-defined-rois","text":"As of igv.js version 2.13.0, users can interactively create global ROIs by sweeping out extents on the ruler area while holding down the Shift key. Interactively defined ROIs can be removed, or assigned an extension, through a popup menu accssed by clicking on the region header. The Browser API function getUserDefinedROIs() returns a promise to return user defined regions as an array of features.","title":"User Defined ROIs"},{"location":"Regions-of-Interest/#clearrois","text":"All global ROIs can be removed by calling browser.clearROIs() .","title":"clearROIs()"},{"location":"SampleInfo/","text":"Sample Information File Sample information files are tab-delimited text files used to associate attributes with sample names. The attributes are displayed in the \"Sample Information\" panel and can be used to sort, group, and filter samples. The file consists of up to three sections A tab delimited table specifying attributes and their values for each sample - Required. Sample mapping information - Optional, needed only if the sample names in the attribute information do not match the sample names in the data files. Colors Optional, used to explicitly specify colors. Attributes # The attributes section is denoted by the line #sampleTable . It consists of a tab delimited header row defining the attribute names, followed by one row per sample containing attribute values. The first column contains the sample names. If the attribute section is the first or only section in the file the #sampleTable line can be omitted. An example attribute section for 2 samples follows. #sampleTable ID Subtype sil_width GENDER KarnScore Censured MGMT_methylated % Tumor Nuclei % Necrosis TCGA-02-0001 Classical -0.135526414 FEMALE 80 0 97.5 0 TCGA-02-0002 Neural -0.069669747 MALE NA NA No NA DEAD 0 97.5 5 Sample mapping # The sample mapping section begins with the line #sampleMapping . It is used to map sample names in the sample information file to corresponding names in the data files. If the names match this section can be omitted. The format is two-column tab delimited. The first column is the sample name in the data file; the second column is the sample identifier in the #sampleTable section. Example: #sampleMapping TRIBE_p_TCGAaffx_B1_2_GBM_Nsp_GenomeWideSNP_6_A01_155716 TCGA-02-0001 TRIBE_p_TCGAaffx_B1_2_GBM_Nsp_GenomeWideSNP_6_A03_155748 TCGA-02-0002 Attribute colors # By default, IGV randomly assigns colors to the attribute values. You can optionally specify the colors for attribute values in RGB format for a specific attribute name, a specific value, or as a heatmap scale for numeric columns in monocolor or in two-color heatmap for specified ranges. The attribute colors file (or section in a combined file) begins with the line #colors . The file is tab delimited with three or four columns: Attribute name. An asterisk * indicates the color specification applies to all attributes. Attribute value or range of two values separated by a colon : . An asterisk * indicates the color specification applies to all attribute values. Color in RGB format. If a color is also specified in column 4, this is the first color of a two color heatmap. (Optional) Second color (RGB format) of a two-color heatmap. #colors # A value of \"MALE\" for the \"GENDER\" column gets the color (0,0,155) GENDER MALE 0,0,155 # A value of \"Classical\" in any column gets the color (80,180,80) * Classical 80,180,80 # Numeric column example, monocolor heatmap KarnScore * 0,0,255 # Another monocolor heatmap, this time with the range specified % Tumor Nuclei 90:100 0,0,255 # A two-color heatmap with the range specified sil_width -0.1:0.5 0,0,255 255,0,0","title":"Sample information"},{"location":"SampleInfo/#attributes","text":"The attributes section is denoted by the line #sampleTable . It consists of a tab delimited header row defining the attribute names, followed by one row per sample containing attribute values. The first column contains the sample names. If the attribute section is the first or only section in the file the #sampleTable line can be omitted. An example attribute section for 2 samples follows. #sampleTable ID Subtype sil_width GENDER KarnScore Censured MGMT_methylated % Tumor Nuclei % Necrosis TCGA-02-0001 Classical -0.135526414 FEMALE 80 0 97.5 0 TCGA-02-0002 Neural -0.069669747 MALE NA NA No NA DEAD 0 97.5 5","title":"Attributes"},{"location":"SampleInfo/#sample-mapping","text":"The sample mapping section begins with the line #sampleMapping . It is used to map sample names in the sample information file to corresponding names in the data files. If the names match this section can be omitted. The format is two-column tab delimited. The first column is the sample name in the data file; the second column is the sample identifier in the #sampleTable section. Example: #sampleMapping TRIBE_p_TCGAaffx_B1_2_GBM_Nsp_GenomeWideSNP_6_A01_155716 TCGA-02-0001 TRIBE_p_TCGAaffx_B1_2_GBM_Nsp_GenomeWideSNP_6_A03_155748 TCGA-02-0002","title":"Sample mapping"},{"location":"SampleInfo/#attribute-colors","text":"By default, IGV randomly assigns colors to the attribute values. You can optionally specify the colors for attribute values in RGB format for a specific attribute name, a specific value, or as a heatmap scale for numeric columns in monocolor or in two-color heatmap for specified ranges. The attribute colors file (or section in a combined file) begins with the line #colors . The file is tab delimited with three or four columns: Attribute name. An asterisk * indicates the color specification applies to all attributes. Attribute value or range of two values separated by a colon : . An asterisk * indicates the color specification applies to all attribute values. Color in RGB format. If a color is also specified in column 4, this is the first color of a two color heatmap. (Optional) Second color (RGB format) of a two-color heatmap. #colors # A value of \"MALE\" for the \"GENDER\" column gets the color (0,0,155) GENDER MALE 0,0,155 # A value of \"Classical\" in any column gets the color (80,180,80) * Classical 80,180,80 # Numeric column example, monocolor heatmap KarnScore * 0,0,255 # Another monocolor heatmap, this time with the range specified % Tumor Nuclei 90:100 0,0,255 # A two-color heatmap with the range specified sil_width -0.1:0.5 0,0,255 255,0,0","title":"Attribute colors"},{"location":"tracks/Alignment-Track/","text":"Alignment Track The alignment track ( type = 'alignment' ) is used to display views of read alignments from BAM or CRAM files. File formats # BAM CRAM Configuration Options # General options Property Description Default showCoverage Show coverage depth track. true showAlignments Show individual alignments. true viewAsPairs If true, paired reads are drawn connected with a line. false pairsSupported If false, mate information in paired reads is ignored during downsampling and the 'View as Pairs' option is removed from the alignment track menu. true color Default color of alignment blocks rgb(170, 170, 170) deletionColor Color of line representing a deletion black skippedColor Color of line representing a skipped region (e.g. splice junction) rgb(150, 170, 170) insertionColor Color of marker for insertions rgb(138, 94, 161) negStrandColor Color of alignment on negative strand. Applicable if colorBy = \"strand\" or \"firstOfPairStrand\" rgba(150, 150, 230, 0.75) posStrandColor Color of alignment or position strand. Applicable if colorBy = \"strand\" if \"firstOfPairStrand\" rgba(230, 150, 150, 0.75) pairConnectorColor Color of connector line between read pairs (\"view as pairs\" mode). alignment color colorBy Color alignment by property. See below. \"unexpectedPair\". groupBy Group alignments by property. See below. samplingWindowSize Window (bucket) size for alignment downsampling in base pairs 100 samplingDepth Number of alignments to keep per bucket. WARNING: Setting this sampling depth to a high value can freeze the browser when viewing areas of deep coverage. 100. alignmentRowHeight Height in pixels of an alignment row when in expanded mode 14 readgroup Readgroup ID value (tag 'RG'). sort Initial sort option. See below. filter Alignment filter options. See below showSoftClips Show soft-clipped regions false showMismatches Highlight alignment bases which do not match the reference. true showAllBases Show all bases of the read sequence. false showInsertionText Show number of bases for insertions inline when zoomed in. false insertionTextColor Color for insertion count text. white showDeletionText Show number of bases deleted inline when zoomed in. false deletionTextColor Color for deletion count text. black displayMode See below. \"EXPANDED\" alignmentRowHeight Height in pixels for each row of alignments in \"EXPANDED\" or \"FULL\" display mode. 14 squishedRowHeight Height in pixels for each row of alignments in \"SQUISHED\" display mode. 3 coverageColor Color of coverage track rgb(150, 150, 150) coverageTrackHeight Height in pixels of the coverage track. 3 autoscale Autoscale coverage track to maximum value in view true unless 'max' is set autoscaleGroup Identifier for an autoscale group for the coverage track. Tracks with the same identifier are autoscaled together. min Sets the minimum value for the coverage track data scale (y-axis). Usually zero. 0 max Sets the maximum value for the coverage track data scale (y-axis). This value is ignored if autoscale = true No default colorBy options # none - default color strand - Color by read strand firstOfPairStrand - For paired alignments. Color both mates in a pair by the read strand of the mate marked \"first in pair\" pairOrientation - For paired alignments. Color by relative orientation (strand) of mates to each other tlen - For paired alignments. Color by the \"template length (insert size)\" of the pair, as indicated by the tlen property of the alignment. unexpectedPair - A combination of pairOrientation and tlen options tag: tagName - Color alignments by the tag indicated, e.g. tag:YC. basemod - Color alignments by base modification. See the IGV desktop documentation for more information. basemod2 - Color alignments by base modification in two color mode. See the IGV desktop documentation for more information. groupBy options # none strand - Group by read strand firstOfPairStrand - For paired alignments. Group both mates in a pair by the read strand of the mate marked \"first in pair\" pairOrientation - For paired alignments. Group by relative orientation (strand) of mates to each other mateChr - For paired alignments. Group alignments by the chromosome of its mate. chimeric - Group by chimeric status. An alignment is considered chimeric if it contains an 'SA' tag. supplementary - Group by status of the SAM format \"supplementary\" tag readOrder - For paired alignments, group by mate read order (first or second) tag: tagName - Group alignments by the indicated tag. base: position - Group alignments by the read base at the given position. Position should be of the form chromosomeName : basePosition , e.g. base:chr1:1000 displayMode options # EXPANDED - Pack alignments densely and draw at alignmentRowHeight SQUISHED - Pack alignments densely and draw at squishedRowHeight FULL - Draw 1 alignment per row at alignmentRowHeight . Paired-end and mate-pair coloring options. # Property Description Default pairOrientation Expected orientation of pairs, one of ff, fr, or rf. Computed minTLEN Minimum expected absolute \"TLEN\" value. Pairs below this value are colored blue if colorBy == \"tlen\" or \"unexpectedPair\" maxTLEN Maximum expected absolute \"TLEN\" value. Pairs above this value are colored red if colorBy == \"tlen\" or \"unexpectedPair\" Computed minTLENPercentile The percentile threshold for expected insert size. If minTLEN is not specified this value is used to compute one. See notes below. 0.1 maxTLENPercentile The percentile maximum for expected insert size. If maxTLEN is not specified this value is used to compute one. See notes below. 99.9 Note on TLEN: This refers to column 9 of an alignment record from the SAM specification. It has variously been called \"template length\", \"insert size\", and \"fragment length\". There is no agreement on a precise definition, and aligner interpretations differ, but generally it can be thought of as the distance between start and end of an aligned pair. Pairs with TLEN outside the expected range can be indicative of a deletion, or more rarely and insertion. Note on TLEN computation: if minTLEN or maxTLEN are not specified a value is computed from a sampling of the first data loaded for the track. Specifically, the values are taken from a percentile of the sample data as specified by minPercentile and maxPercentile. It is possible to specify an explicit value for one. Sort option # The sort object defines initial sort order of packed alignment rows based on an alignment property at a specified position Property Description Default chr Sequence (chromosome) name position Genomic position (integer) option Parameter to sort by. One of 'BASE', 'STRAND', 'INSERT_SIZE', 'MATE_CHR', 'MQ', 'TAG' tag Tag name to sort by. Include only if option = 'TAG direction Sort directions. ASC = ascending, DESC = descending \"ASC\" Filter options # The filter object defines an alignment filter based on sam flags. If not supplied default filters are set as indicated in the table below. Property Description Default vendorFailed filter alignments marked as failing vendor quality checks (bit 0x200) true duplicates filter alignments marked as a duplicate (bit 0x400) true secondary filter alignments marked secondary (bit 0x100) false supplementary filter alignments marked as supplmentary (bit 0x800) false mq filter alignments with mapping quality < supplied value (a number) 0 readgroups array of read group names ('RG' tag). If present filter alignments not matching this set Functions # An alignment track object exports 2 functions that can be called after track creation. setHighlightedReads(arrayOfReadNames, color) Highlights alignments with specified read names by drawing an outline in the specified color. bamTrack.setHighlightedReads([\"SRR099953.99059361\", \"SRR099953.79101554\"], \"#0000ff\") sort(sortOptions) Sort the alignment track. See above for the sortOptions object definition. bamTrack.sort({ chr: \"chr1\", position: 155155361, option: \"BASE\", direction: \"ASC\" }) Example # { \"type\": \"alignment\", \"format\": \"bam\", \"name\": \"NA12878\", \"url\": \"gs://genomics-public-data/platinum-genomes/bam/NA12878_S1.bam\", \"indexURL\": \"gs://genomics-public-data/platinum-genomes/bam/NA12878_S1.bam.bai\", }","title":"Alignment"},{"location":"tracks/Alignment-Track/#file-formats","text":"BAM CRAM","title":"File formats"},{"location":"tracks/Alignment-Track/#configuration-options","text":"General options Property Description Default showCoverage Show coverage depth track. true showAlignments Show individual alignments. true viewAsPairs If true, paired reads are drawn connected with a line. false pairsSupported If false, mate information in paired reads is ignored during downsampling and the 'View as Pairs' option is removed from the alignment track menu. true color Default color of alignment blocks rgb(170, 170, 170) deletionColor Color of line representing a deletion black skippedColor Color of line representing a skipped region (e.g. splice junction) rgb(150, 170, 170) insertionColor Color of marker for insertions rgb(138, 94, 161) negStrandColor Color of alignment on negative strand. Applicable if colorBy = \"strand\" or \"firstOfPairStrand\" rgba(150, 150, 230, 0.75) posStrandColor Color of alignment or position strand. Applicable if colorBy = \"strand\" if \"firstOfPairStrand\" rgba(230, 150, 150, 0.75) pairConnectorColor Color of connector line between read pairs (\"view as pairs\" mode). alignment color colorBy Color alignment by property. See below. \"unexpectedPair\". groupBy Group alignments by property. See below. samplingWindowSize Window (bucket) size for alignment downsampling in base pairs 100 samplingDepth Number of alignments to keep per bucket. WARNING: Setting this sampling depth to a high value can freeze the browser when viewing areas of deep coverage. 100. alignmentRowHeight Height in pixels of an alignment row when in expanded mode 14 readgroup Readgroup ID value (tag 'RG'). sort Initial sort option. See below. filter Alignment filter options. See below showSoftClips Show soft-clipped regions false showMismatches Highlight alignment bases which do not match the reference. true showAllBases Show all bases of the read sequence. false showInsertionText Show number of bases for insertions inline when zoomed in. false insertionTextColor Color for insertion count text. white showDeletionText Show number of bases deleted inline when zoomed in. false deletionTextColor Color for deletion count text. black displayMode See below. \"EXPANDED\" alignmentRowHeight Height in pixels for each row of alignments in \"EXPANDED\" or \"FULL\" display mode. 14 squishedRowHeight Height in pixels for each row of alignments in \"SQUISHED\" display mode. 3 coverageColor Color of coverage track rgb(150, 150, 150) coverageTrackHeight Height in pixels of the coverage track. 3 autoscale Autoscale coverage track to maximum value in view true unless 'max' is set autoscaleGroup Identifier for an autoscale group for the coverage track. Tracks with the same identifier are autoscaled together. min Sets the minimum value for the coverage track data scale (y-axis). Usually zero. 0 max Sets the maximum value for the coverage track data scale (y-axis). This value is ignored if autoscale = true No default","title":"Configuration Options"},{"location":"tracks/Alignment-Track/#colorby-options","text":"none - default color strand - Color by read strand firstOfPairStrand - For paired alignments. Color both mates in a pair by the read strand of the mate marked \"first in pair\" pairOrientation - For paired alignments. Color by relative orientation (strand) of mates to each other tlen - For paired alignments. Color by the \"template length (insert size)\" of the pair, as indicated by the tlen property of the alignment. unexpectedPair - A combination of pairOrientation and tlen options tag: tagName - Color alignments by the tag indicated, e.g. tag:YC. basemod - Color alignments by base modification. See the IGV desktop documentation for more information. basemod2 - Color alignments by base modification in two color mode. See the IGV desktop documentation for more information.","title":"colorBy options"},{"location":"tracks/Alignment-Track/#groupby-options","text":"none strand - Group by read strand firstOfPairStrand - For paired alignments. Group both mates in a pair by the read strand of the mate marked \"first in pair\" pairOrientation - For paired alignments. Group by relative orientation (strand) of mates to each other mateChr - For paired alignments. Group alignments by the chromosome of its mate. chimeric - Group by chimeric status. An alignment is considered chimeric if it contains an 'SA' tag. supplementary - Group by status of the SAM format \"supplementary\" tag readOrder - For paired alignments, group by mate read order (first or second) tag: tagName - Group alignments by the indicated tag. base: position - Group alignments by the read base at the given position. Position should be of the form chromosomeName : basePosition , e.g. base:chr1:1000","title":"groupBy options"},{"location":"tracks/Alignment-Track/#displaymode-options","text":"EXPANDED - Pack alignments densely and draw at alignmentRowHeight SQUISHED - Pack alignments densely and draw at squishedRowHeight FULL - Draw 1 alignment per row at alignmentRowHeight .","title":"displayMode options"},{"location":"tracks/Alignment-Track/#paired-end-and-mate-pair-coloring-options","text":"Property Description Default pairOrientation Expected orientation of pairs, one of ff, fr, or rf. Computed minTLEN Minimum expected absolute \"TLEN\" value. Pairs below this value are colored blue if colorBy == \"tlen\" or \"unexpectedPair\" maxTLEN Maximum expected absolute \"TLEN\" value. Pairs above this value are colored red if colorBy == \"tlen\" or \"unexpectedPair\" Computed minTLENPercentile The percentile threshold for expected insert size. If minTLEN is not specified this value is used to compute one. See notes below. 0.1 maxTLENPercentile The percentile maximum for expected insert size. If maxTLEN is not specified this value is used to compute one. See notes below. 99.9 Note on TLEN: This refers to column 9 of an alignment record from the SAM specification. It has variously been called \"template length\", \"insert size\", and \"fragment length\". There is no agreement on a precise definition, and aligner interpretations differ, but generally it can be thought of as the distance between start and end of an aligned pair. Pairs with TLEN outside the expected range can be indicative of a deletion, or more rarely and insertion. Note on TLEN computation: if minTLEN or maxTLEN are not specified a value is computed from a sampling of the first data loaded for the track. Specifically, the values are taken from a percentile of the sample data as specified by minPercentile and maxPercentile. It is possible to specify an explicit value for one.","title":"Paired-end and mate-pair coloring options."},{"location":"tracks/Alignment-Track/#sort-option","text":"The sort object defines initial sort order of packed alignment rows based on an alignment property at a specified position Property Description Default chr Sequence (chromosome) name position Genomic position (integer) option Parameter to sort by. One of 'BASE', 'STRAND', 'INSERT_SIZE', 'MATE_CHR', 'MQ', 'TAG' tag Tag name to sort by. Include only if option = 'TAG direction Sort directions. ASC = ascending, DESC = descending \"ASC\"","title":"Sort option"},{"location":"tracks/Alignment-Track/#filter-options","text":"The filter object defines an alignment filter based on sam flags. If not supplied default filters are set as indicated in the table below. Property Description Default vendorFailed filter alignments marked as failing vendor quality checks (bit 0x200) true duplicates filter alignments marked as a duplicate (bit 0x400) true secondary filter alignments marked secondary (bit 0x100) false supplementary filter alignments marked as supplmentary (bit 0x800) false mq filter alignments with mapping quality < supplied value (a number) 0 readgroups array of read group names ('RG' tag). If present filter alignments not matching this set","title":"Filter options"},{"location":"tracks/Alignment-Track/#functions","text":"An alignment track object exports 2 functions that can be called after track creation. setHighlightedReads(arrayOfReadNames, color) Highlights alignments with specified read names by drawing an outline in the specified color. bamTrack.setHighlightedReads([\"SRR099953.99059361\", \"SRR099953.79101554\"], \"#0000ff\") sort(sortOptions) Sort the alignment track. See above for the sortOptions object definition. bamTrack.sort({ chr: \"chr1\", position: 155155361, option: \"BASE\", direction: \"ASC\" })","title":"Functions"},{"location":"tracks/Alignment-Track/#example","text":"{ \"type\": \"alignment\", \"format\": \"bam\", \"name\": \"NA12878\", \"url\": \"gs://genomics-public-data/platinum-genomes/bam/NA12878_S1.bam\", \"indexURL\": \"gs://genomics-public-data/platinum-genomes/bam/NA12878_S1.bam.bai\", }","title":"Example"},{"location":"tracks/Annotation-Track/","text":"Annotation Track The annotation track ( type = 'annotation' ) display views of genomic annotations. File Formats # bed gff3 gtf genePred genePredExt peaks narrowPeak broadPeak bigBed Configuration Options # Configuration options specific to annotation tracks. All properties below are optional. Property Description Default displayMode Annotation display mode, one of \"COLLAPSED\", \"EXPANDED\", \"SQUISHED\" \"COLLAPSED\" expandedRowHeight Height of each row of features in \"EXPANDED\" mode 30 squishedRowHeight Height of each row of features in \"SQUISHED\" mode 15 nameField For GFF/GTF file formats. Name of column 9 property to be used for feature label. maxRows Maximum number of rows of features to display 500 searchable If true, feature names for this track can be searched for. Use this option with caution, it is memory intensive. This option will not work with indexed tracks. false searchableFields For use with the searchable option in conjunction with GFF files. An array of field (column 9) names to be included in feature searches. When searching for feature attributes spaces need to be escaped with a \"+\" sign or percent encoded (\"%20). filterTypes Array of gff feature types to filter from display. ['chromosome, 'gene'] color CSS color value for track features, e.g. \"#ff0000\" or \"rgb(100,0,100)\". rgb(0,0,150) altColor If supplied, used for features on negative strand colorBy Used with GFF/GTF files. Name of column 9 attribute to color features by. colorTable Used in conjunction with colorBy property. Maps attribute values to CSS colors. See example below. Example # { \"type\": \"annotation\", \"format\": \"bed\", \"name\": \"Gencode v18\", \"url\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/gencode.v18.collapsed.bed.gz\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/gencode.v18.collapsed.bed.gz.tbi\" } colorBy example # For GFF and GTF files the coloryBy property can be used ot specify a column 9 property to color by. To specify specific colors for property values use the colorTable property. If no colorTable is specified colors are assigned randomly. { name: \"Color by attribute biotype\", type: \"annotation\", format: \"gff3\", displayMode: \"expanded\", height: 300, url: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz.tbi\", visibilityWindow: 1000000, colorBy: \"biotype\", colorTable: { \"antisense\": \"blueviolet\", \"protein_coding\": \"blue\", \"retained_intron\": \"rgb(0, 150, 150)\", \"processed_transcript\": \"purple\", \"processed_pseudogene\": \"#7fff00\", \"unprocessed_pseudogene\": \"#d2691e\", \"*\": \"black\" } }, color function # The color and altColor properties can be specified with a function that takes a feature object as an argument and returns a CSS color string (e.g. \"blue\", \"rgb(0,150,150)\", \"#d2691e\"). Example { name: \"Color by function\", format: \"gff3\", displayMode: \"expanded\", height: 300, url: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz.tbi\", visibilityWindow: 1000000, color: (feature) => { switch (feature.getAttributeValue(\"biotype\")) { case \"antisense\": return \"blueviolet\" case \"protein_coding\": return \"blue\" case \"retained_intron\": return \"rgb(0, 150, 150)\" case \"processed_transcript\": return \"purple\" case \"processed_pseudogene\": return \"#7fff00\" case \"unprocessed_pseudogene\": return \"#d2691e\" default: return \"black\" } } } The feature object passed to the color function is described below interface Feature { chr: string; start: integer; end: integer; name: string; score: float; strand: string; cdStart: integer; cdEnd: integer; color: string; exons: Exon []; getAttributeValue: (property: string) => value; } interface Exon { start: integer; end: integer; cdStart: integer; cdEnd: integer; utr: boolean; }","title":"Annotation"},{"location":"tracks/Annotation-Track/#file-formats","text":"bed gff3 gtf genePred genePredExt peaks narrowPeak broadPeak bigBed","title":"File Formats"},{"location":"tracks/Annotation-Track/#configuration-options","text":"Configuration options specific to annotation tracks. All properties below are optional. Property Description Default displayMode Annotation display mode, one of \"COLLAPSED\", \"EXPANDED\", \"SQUISHED\" \"COLLAPSED\" expandedRowHeight Height of each row of features in \"EXPANDED\" mode 30 squishedRowHeight Height of each row of features in \"SQUISHED\" mode 15 nameField For GFF/GTF file formats. Name of column 9 property to be used for feature label. maxRows Maximum number of rows of features to display 500 searchable If true, feature names for this track can be searched for. Use this option with caution, it is memory intensive. This option will not work with indexed tracks. false searchableFields For use with the searchable option in conjunction with GFF files. An array of field (column 9) names to be included in feature searches. When searching for feature attributes spaces need to be escaped with a \"+\" sign or percent encoded (\"%20). filterTypes Array of gff feature types to filter from display. ['chromosome, 'gene'] color CSS color value for track features, e.g. \"#ff0000\" or \"rgb(100,0,100)\". rgb(0,0,150) altColor If supplied, used for features on negative strand colorBy Used with GFF/GTF files. Name of column 9 attribute to color features by. colorTable Used in conjunction with colorBy property. Maps attribute values to CSS colors. See example below.","title":"Configuration Options"},{"location":"tracks/Annotation-Track/#example","text":"{ \"type\": \"annotation\", \"format\": \"bed\", \"name\": \"Gencode v18\", \"url\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/gencode.v18.collapsed.bed.gz\", \"indexURL\": \"https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg19/genes/gencode.v18.collapsed.bed.gz.tbi\" }","title":"Example"},{"location":"tracks/Annotation-Track/#colorby-example","text":"For GFF and GTF files the coloryBy property can be used ot specify a column 9 property to color by. To specify specific colors for property values use the colorTable property. If no colorTable is specified colors are assigned randomly. { name: \"Color by attribute biotype\", type: \"annotation\", format: \"gff3\", displayMode: \"expanded\", height: 300, url: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz.tbi\", visibilityWindow: 1000000, colorBy: \"biotype\", colorTable: { \"antisense\": \"blueviolet\", \"protein_coding\": \"blue\", \"retained_intron\": \"rgb(0, 150, 150)\", \"processed_transcript\": \"purple\", \"processed_pseudogene\": \"#7fff00\", \"unprocessed_pseudogene\": \"#d2691e\", \"*\": \"black\" } },","title":"colorBy example"},{"location":"tracks/Annotation-Track/#color-function","text":"The color and altColor properties can be specified with a function that takes a feature object as an argument and returns a CSS color string (e.g. \"blue\", \"rgb(0,150,150)\", \"#d2691e\"). Example { name: \"Color by function\", format: \"gff3\", displayMode: \"expanded\", height: 300, url: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.genomes/hg38/Homo_sapiens.GRCh38.94.chr.gff3.gz.tbi\", visibilityWindow: 1000000, color: (feature) => { switch (feature.getAttributeValue(\"biotype\")) { case \"antisense\": return \"blueviolet\" case \"protein_coding\": return \"blue\" case \"retained_intron\": return \"rgb(0, 150, 150)\" case \"processed_transcript\": return \"purple\" case \"processed_pseudogene\": return \"#7fff00\" case \"unprocessed_pseudogene\": return \"#d2691e\" default: return \"black\" } } } The feature object passed to the color function is described below interface Feature { chr: string; start: integer; end: integer; name: string; score: float; strand: string; cdStart: integer; cdEnd: integer; color: string; exons: Exon []; getAttributeValue: (property: string) => value; } interface Exon { start: integer; end: integer; cdStart: integer; cdEnd: integer; utr: boolean; }","title":"color function"},{"location":"tracks/Arc-Track/","text":"Arc Track The arc track ( type='arc' ) is used to visualize RNA secondary structures in arcs connecting base pairs. Alternative structures, where one nucleotide is involved in more than one base pair, and pseudo knots, where arcs cross, can be accommodated. File Formats # Data for the arc track can be input in either bp or bed format as described below. bp # The bp format is a tab-delimited file with 5 or 6 columns. The file begins with 1 or more optional color specification lines beginning with the token \"color:\" followed by columns for red, green, and blue components and an optional description. The color specification lines are followed immediately by data lines specifying chromosome, start & end of genomic region of arc beginning, start & end of genomic region of arc end, and an optional color index. The color index refers to the line number of a color specification, with 0 (zero) being the first line. color: 255 218 125 Low-probability basepairs color: 51 114 38 High-probability basepairs chr1 76 76 82 82 0 chr1 105 115 334 344 0 chr1 117 117 332 332 0 chr1 118 118 545 545 0 chr1 124 124 539 539 0 chr1 1 3 55 57 1 chr1 5 15 44 54 1 chr1 17 21 39 43 1 chr1 25 28 35 38 1 chr1 58 65 97 104 1 chr1 67 69 92 94 1 chr1 70 73 87 90 1 bed # Data for arcs between single nucleotides can be input in \"bed\" format with the following requirements. The file should start with a track line which species graphType=arc, e.g. track graphType=arc . Each record line must contain the first three columns of a bed file: chrom, start and end, where the start and end represent the base pair. Note that the start position follows standard BED file convention and is zero-based (first base on a sequence is position 0). The following example represent a hypothetical stem loop: track graphType=arc chr1 10 25 stemloop1 chr1 11 24 stemloop1 chr1 12 23 stemloop1 chr1 13 22 stemloop1 chr1 14 21 stemloop1 chr1 15 20 stemloop1 Additional examples can be found in the supplement of the following paper Lu Z, Zhang QC, Lee B, Flynn RA, Smith MA, Robinson JT, Davidovich C, Gooding AR, Goodrich KJ, Mattick JS, Mesirov JP, Cech TR, Chang HY. RNA Duplex Map in Living Cells Reveals Higher-Order Transcriptome Structure. Cell. 2016 May 12 . Configuration Options # General options Property Description Default arcOrientation Orientation of arcs, one of \"UP\" for clockwise or \"DOWN\" for counter-clockwise direction. \"UP\" Example # { \"type\": \"arc\", \"format\": \"bp\", \"name\": \"RNA Struct BP\", \"url\": \"example.bp\" }","title":"RNA Structure"},{"location":"tracks/Arc-Track/#file-formats","text":"Data for the arc track can be input in either bp or bed format as described below.","title":"File Formats"},{"location":"tracks/Arc-Track/#bp","text":"The bp format is a tab-delimited file with 5 or 6 columns. The file begins with 1 or more optional color specification lines beginning with the token \"color:\" followed by columns for red, green, and blue components and an optional description. The color specification lines are followed immediately by data lines specifying chromosome, start & end of genomic region of arc beginning, start & end of genomic region of arc end, and an optional color index. The color index refers to the line number of a color specification, with 0 (zero) being the first line. color: 255 218 125 Low-probability basepairs color: 51 114 38 High-probability basepairs chr1 76 76 82 82 0 chr1 105 115 334 344 0 chr1 117 117 332 332 0 chr1 118 118 545 545 0 chr1 124 124 539 539 0 chr1 1 3 55 57 1 chr1 5 15 44 54 1 chr1 17 21 39 43 1 chr1 25 28 35 38 1 chr1 58 65 97 104 1 chr1 67 69 92 94 1 chr1 70 73 87 90 1","title":"bp"},{"location":"tracks/Arc-Track/#bed","text":"Data for arcs between single nucleotides can be input in \"bed\" format with the following requirements. The file should start with a track line which species graphType=arc, e.g. track graphType=arc . Each record line must contain the first three columns of a bed file: chrom, start and end, where the start and end represent the base pair. Note that the start position follows standard BED file convention and is zero-based (first base on a sequence is position 0). The following example represent a hypothetical stem loop: track graphType=arc chr1 10 25 stemloop1 chr1 11 24 stemloop1 chr1 12 23 stemloop1 chr1 13 22 stemloop1 chr1 14 21 stemloop1 chr1 15 20 stemloop1 Additional examples can be found in the supplement of the following paper Lu Z, Zhang QC, Lee B, Flynn RA, Smith MA, Robinson JT, Davidovich C, Gooding AR, Goodrich KJ, Mattick JS, Mesirov JP, Cech TR, Chang HY. RNA Duplex Map in Living Cells Reveals Higher-Order Transcriptome Structure. Cell. 2016 May 12 .","title":"bed"},{"location":"tracks/Arc-Track/#configuration-options","text":"General options Property Description Default arcOrientation Orientation of arcs, one of \"UP\" for clockwise or \"DOWN\" for counter-clockwise direction. \"UP\"","title":"Configuration Options"},{"location":"tracks/Arc-Track/#example","text":"{ \"type\": \"arc\", \"format\": \"bp\", \"name\": \"RNA Struct BP\", \"url\": \"example.bp\" }","title":"Example"},{"location":"tracks/CNVPytor/","text":"CNVpytor Track The CNVpytor track (type = 'cnvpytor' ) is a tool for copy number analysis from read depth and B-allele frequency (BAF) of variants. As input, it takes BAM and/or VCF files. The analyzed data is stored in pytor file and can be viewed using cnvpytor track in igv. One can also use a whole genome VCF file as an input to the cnvpytor track. In such a case read depth and BAF information are calculated on-fly. For details: https://github.com/abyzovlab/CNVpytor File formats # cnvpytor track can be loaded from either pytor or VCF files. pytor # CNVpytor -produced pytor file. Option to switch among available bin sizes. Option to switch among available CNV callers. Signals: Raw Read Depth GC Corrected Read depth CNV call Maximum of BAF likelihood vcf # Whole genome VCF file with constraints. Indexed VCF files are not supported as data for the entire genome is required for the calculations. Both AD (Read Depth information) and GT (Genotype information) fields are required . Currently only a single genotype field is supported. Multi-sample VCFs are not supported. Currently, only ReadDepth CNV caller is available. Signals: Raw Read Depth Partition CNV call Maximum of BAF likelihood Loading the data may take time, as it reads the entire VCF file and calculates the signals. Configuration Options # General options Property Description Default signal_name Available Signal names rd_snp : Read Depth and BAF Likelihood rd : Read depth snp : BAF likelihood rd_snp cnv_caller Name of CNV caller Options ReadDepth: Uses Read depth information only 2D: Uses both Read depth and BAF information Shows data based on available caller data. 2D bin_size Bin size pytor file: Bin size should be avialable in the pytor file vcf: Bin size should be multiple of 10,000 100000 colors Color of the signals. Signal details are in file format section. ['gray', 'black', 'green', 'blue'] Examples # pytor file as input # { id: \"pytor_track\", type: \"cnvpytor\", name: \"HepG2 pytor\", url: \"https://storage.googleapis.com/cnvpytor_data/HepG2_WGS.pytor\", } View # VCF file as input # { id: \"cnvpytor_track_vcf\", type: \"cnvpytor\", name: \"HepG2 VCF\", url: \"https://storage.googleapis.com/cnvpytor_data/HepG2.vcf.gz\", } View #","title":"CNV Pytor"},{"location":"tracks/CNVPytor/#file-formats","text":"cnvpytor track can be loaded from either pytor or VCF files.","title":"File formats"},{"location":"tracks/CNVPytor/#pytor","text":"CNVpytor -produced pytor file. Option to switch among available bin sizes. Option to switch among available CNV callers. Signals: Raw Read Depth GC Corrected Read depth CNV call Maximum of BAF likelihood","title":"pytor"},{"location":"tracks/CNVPytor/#vcf","text":"Whole genome VCF file with constraints. Indexed VCF files are not supported as data for the entire genome is required for the calculations. Both AD (Read Depth information) and GT (Genotype information) fields are required . Currently only a single genotype field is supported. Multi-sample VCFs are not supported. Currently, only ReadDepth CNV caller is available. Signals: Raw Read Depth Partition CNV call Maximum of BAF likelihood Loading the data may take time, as it reads the entire VCF file and calculates the signals.","title":"vcf"},{"location":"tracks/CNVPytor/#configuration-options","text":"General options Property Description Default signal_name Available Signal names rd_snp : Read Depth and BAF Likelihood rd : Read depth snp : BAF likelihood rd_snp cnv_caller Name of CNV caller Options ReadDepth: Uses Read depth information only 2D: Uses both Read depth and BAF information Shows data based on available caller data. 2D bin_size Bin size pytor file: Bin size should be avialable in the pytor file vcf: Bin size should be multiple of 10,000 100000 colors Color of the signals. Signal details are in file format section. ['gray', 'black', 'green', 'blue']","title":"Configuration Options"},{"location":"tracks/CNVPytor/#examples","text":"","title":"Examples"},{"location":"tracks/CNVPytor/#pytor-file-as-input","text":"{ id: \"pytor_track\", type: \"cnvpytor\", name: \"HepG2 pytor\", url: \"https://storage.googleapis.com/cnvpytor_data/HepG2_WGS.pytor\", }","title":"pytor file as input"},{"location":"tracks/CNVPytor/#view","text":"","title":"View"},{"location":"tracks/CNVPytor/#vcf-file-as-input","text":"{ id: \"cnvpytor_track_vcf\", type: \"cnvpytor\", name: \"HepG2 VCF\", url: \"https://storage.googleapis.com/cnvpytor_data/HepG2.vcf.gz\", }","title":"VCF file as input"},{"location":"tracks/CNVPytor/#view_1","text":"","title":"View"},{"location":"tracks/GWAS/","text":"GWAS Track The GWAS track ( type = 'gwas' ) is used for visualizing genome wide association data as a \"manhattan\" style plot File formats # GWAS tracks can be loaded from either bed or files. bed # 5 columns (chromosome, start, end, name, value). Additional columns are ignored. Note bed format uses UCSC \"0-based\" positions, so the first position in the chromosome has start=0, end=1. gwas # This is a flexible tab-delimited format. Any number of columns are supported but must include chromosome, position (1- based), and value (p-value or probability). A column header is required. Position of the required columns can be specified in the file column header, as described below, or in the track configuration (see example). Remaining columns are used for the popup text display. To specify column positions for the required fields include the following case-insensitive column headers in the header line. CHR : chromosome (aliases chr, chromosome) BP : nucleotide location (aliases bp, pos, position) SNP : SNP identifier (aliases snp, rs, rsid, rsnum, id, marker, markername) P : p-value for the association (aliases p, pval, p-value, pvalue, p.value) Configuration Options # Property Description Default min Sets the minimum value for the data (y-axis) scale. 0 max Sets the maximum value for the data (y-axis) scale. 25 for p-value (-log10(pvalue)), 1 for posterior probability format File format, either \"bed\" or \"gwas\" posteriorProbability If true values are interpreted as probabilities with a range 0-1. By default values are treated as p-values and plotted as -log10(P-value). false dotSize Diameter of dots in pixels 3 columns For gwas format only. Declaration of column number for chromosome, position, and value. Optional, if specified all must be provided. See example below. {chromosome: 2, position: 3, value: 4} colorTable Object mapping chromosome names -> colors. If supplied all chromosomes in data should be included. See below for the default color table See below Example # { type: \"gwas\", format: \"gwas\", name: \"GWAS sample\", url: \"https://s3.amazonaws.com/igv.org.demo/gwas_sample.tsv.gz\", indexed: false, columns: { chromosome: 12, position: 13, value: 28 } } Default color table # { \"X\": \"rgb(204, 153, 0)\", \"Y\": \"rgb(153, 204, 0)\", \"Un\": \"darkGray)\", \"1\": \"rgb(80, 80, 255)\", \"2\": \"rgb(206, 61, 50)\", \"2a\": \"rgb(210, 65, 55)\", \"2b\": \"rgb(215, 70, 60)\", \"3\": \"rgb(116, 155, 88)\", \"4\": \"rgb(240, 230, 133)\", \"5\": \"rgb(70, 105, 131)\", \"6\": \"rgb(186, 99, 56)\", \"7\": \"rgb(93, 177, 221)\", \"8\": \"rgb(128, 34, 104)\", \"9\": \"rgb(107, 215, 107)\", \"10\": \"rgb(213, 149, 167)\", \"11\": \"rgb(146, 72, 34)\", \"12\": \"rgb(131, 123, 141)\", \"13\": \"rgb(199, 81, 39)\", \"14\": \"rgb(213, 143, 92)\", \"15\": \"rgb(122, 101, 165)\", \"16\": \"rgb(228, 175, 105)\", \"17\": \"rgb(59, 27, 83)\", \"18\": \"rgb(205, 222, 183)\", \"19\": \"rgb(97, 42, 121)\", \"20\": \"rgb(174, 31, 99)\", \"21\": \"rgb(231, 199, 111)\", \"22\": \"rgb(90, 101, 94)\", \"23\": \"rgb(204, 153, 0)\", \"24\": \"rgb(153, 204, 0)\", \"25\": \"rgb(51, 204, 0)\", \"26\": \"rgb(0, 204, 51)\", \"27\": \"rgb(0, 204, 153)\", \"28\": \"rgb(0, 153, 204)\", \"29\": \"rgb(10, 71, 255)\", \"30\": \"rgb(71, 117, 255)\", \"31\": \"rgb(255, 194, 10)\", \"32\": \"rgb(255, 209, 71)\", \"33\": \"rgb(153, 0, 51)\", \"34\": \"rgb(153, 26, 0)\", \"35\": \"rgb(153, 102, 0)\", \"36\": \"rgb(128, 153, 0)\", \"37\": \"rgb(51, 153, 0)\", \"38\": \"rgb(0, 153, 26)\", \"39\": \"rgb(0, 153, 102)\", \"40\": \"rgb(0, 128, 153)\", \"41\": \"rgb(0, 51, 153)\", \"42\": \"rgb(26, 0, 153)\", \"43\": \"rgb(102, 0, 153)\", \"44\": \"rgb(153, 0, 128)\", \"45\": \"rgb(214, 0, 71)\", \"46\": \"rgb(255, 20, 99)\", \"47\": \"rgb(0, 214, 143)\", \"48\": \"rgb(20, 255, 177)\" }","title":"GWAS"},{"location":"tracks/GWAS/#file-formats","text":"GWAS tracks can be loaded from either bed or files.","title":"File formats"},{"location":"tracks/GWAS/#bed","text":"5 columns (chromosome, start, end, name, value). Additional columns are ignored. Note bed format uses UCSC \"0-based\" positions, so the first position in the chromosome has start=0, end=1.","title":"bed"},{"location":"tracks/GWAS/#gwas","text":"This is a flexible tab-delimited format. Any number of columns are supported but must include chromosome, position (1- based), and value (p-value or probability). A column header is required. Position of the required columns can be specified in the file column header, as described below, or in the track configuration (see example). Remaining columns are used for the popup text display. To specify column positions for the required fields include the following case-insensitive column headers in the header line. CHR : chromosome (aliases chr, chromosome) BP : nucleotide location (aliases bp, pos, position) SNP : SNP identifier (aliases snp, rs, rsid, rsnum, id, marker, markername) P : p-value for the association (aliases p, pval, p-value, pvalue, p.value)","title":"gwas"},{"location":"tracks/GWAS/#configuration-options","text":"Property Description Default min Sets the minimum value for the data (y-axis) scale. 0 max Sets the maximum value for the data (y-axis) scale. 25 for p-value (-log10(pvalue)), 1 for posterior probability format File format, either \"bed\" or \"gwas\" posteriorProbability If true values are interpreted as probabilities with a range 0-1. By default values are treated as p-values and plotted as -log10(P-value). false dotSize Diameter of dots in pixels 3 columns For gwas format only. Declaration of column number for chromosome, position, and value. Optional, if specified all must be provided. See example below. {chromosome: 2, position: 3, value: 4} colorTable Object mapping chromosome names -> colors. If supplied all chromosomes in data should be included. See below for the default color table See below","title":"Configuration Options"},{"location":"tracks/GWAS/#example","text":"{ type: \"gwas\", format: \"gwas\", name: \"GWAS sample\", url: \"https://s3.amazonaws.com/igv.org.demo/gwas_sample.tsv.gz\", indexed: false, columns: { chromosome: 12, position: 13, value: 28 } }","title":"Example"},{"location":"tracks/GWAS/#default-color-table","text":"{ \"X\": \"rgb(204, 153, 0)\", \"Y\": \"rgb(153, 204, 0)\", \"Un\": \"darkGray)\", \"1\": \"rgb(80, 80, 255)\", \"2\": \"rgb(206, 61, 50)\", \"2a\": \"rgb(210, 65, 55)\", \"2b\": \"rgb(215, 70, 60)\", \"3\": \"rgb(116, 155, 88)\", \"4\": \"rgb(240, 230, 133)\", \"5\": \"rgb(70, 105, 131)\", \"6\": \"rgb(186, 99, 56)\", \"7\": \"rgb(93, 177, 221)\", \"8\": \"rgb(128, 34, 104)\", \"9\": \"rgb(107, 215, 107)\", \"10\": \"rgb(213, 149, 167)\", \"11\": \"rgb(146, 72, 34)\", \"12\": \"rgb(131, 123, 141)\", \"13\": \"rgb(199, 81, 39)\", \"14\": \"rgb(213, 143, 92)\", \"15\": \"rgb(122, 101, 165)\", \"16\": \"rgb(228, 175, 105)\", \"17\": \"rgb(59, 27, 83)\", \"18\": \"rgb(205, 222, 183)\", \"19\": \"rgb(97, 42, 121)\", \"20\": \"rgb(174, 31, 99)\", \"21\": \"rgb(231, 199, 111)\", \"22\": \"rgb(90, 101, 94)\", \"23\": \"rgb(204, 153, 0)\", \"24\": \"rgb(153, 204, 0)\", \"25\": \"rgb(51, 204, 0)\", \"26\": \"rgb(0, 204, 51)\", \"27\": \"rgb(0, 204, 153)\", \"28\": \"rgb(0, 153, 204)\", \"29\": \"rgb(10, 71, 255)\", \"30\": \"rgb(71, 117, 255)\", \"31\": \"rgb(255, 194, 10)\", \"32\": \"rgb(255, 209, 71)\", \"33\": \"rgb(153, 0, 51)\", \"34\": \"rgb(153, 26, 0)\", \"35\": \"rgb(153, 102, 0)\", \"36\": \"rgb(128, 153, 0)\", \"37\": \"rgb(51, 153, 0)\", \"38\": \"rgb(0, 153, 26)\", \"39\": \"rgb(0, 153, 102)\", \"40\": \"rgb(0, 128, 153)\", \"41\": \"rgb(0, 51, 153)\", \"42\": \"rgb(26, 0, 153)\", \"43\": \"rgb(102, 0, 153)\", \"44\": \"rgb(153, 0, 128)\", \"45\": \"rgb(214, 0, 71)\", \"46\": \"rgb(255, 20, 99)\", \"47\": \"rgb(0, 214, 143)\", \"48\": \"rgb(20, 255, 177)\" }","title":"Default color table"},{"location":"tracks/Interact/","text":"Interact Track The interact track ( type = 'interact' ) visualizes pairwise interactions between genome regions as arcs. File formats # bedpe interact bigInteract Configuration Options # General options Property Description Default arcType See below \"nested\" arcOrientation Direction of arcs (\"UP\" or \"DOWN\") \"UP\" alpha Alpha transparency to apply to arcs that extend beyond viewport. Number between 0 and 1 0.5 thickness Line thickness 2 Arc types # nested - Arc height is proportional to feature width. propotional - Arc height is proportional to feature score. inView - Proportional type, only arcs that are completely in view are drawn. partialInView - Proportional type, only arcs that are whole or partially in view are drawn. Example # const options = { genome: \"hg38\", locus: \"chr2:65,489,209-65,795,733\", tracks: [ { url: \"https://s3.amazonaws.com/igv.org.demo/GSM1872886_GM12878_CTCF_PET.bedpe.txt\", type: \"interact\", format: \"bedpe\", name: \"CTCF PET - proportional\", arcType: \"proportional\", arcOrientation: \"UP\", color: \"rgb(0,200,0)\", logScale: true, max: 80, visibilityWindow: 10000000 }, { url: \"https://s3.amazonaws.com/igv.org.demo/GSM1872886_GM12878_CTCF_PET.bedpe.txt\", type: \"interact\", format: \"bedpe\", name: \"CTCF PET - nested\", arcType: \"nested\", arcOrientation: \"DOWN\", color: \"blue\", alpha: 0.15, visibilityWindow: 10000000 } ] }","title":"Interact"},{"location":"tracks/Interact/#file-formats","text":"bedpe interact bigInteract","title":"File formats"},{"location":"tracks/Interact/#configuration-options","text":"General options Property Description Default arcType See below \"nested\" arcOrientation Direction of arcs (\"UP\" or \"DOWN\") \"UP\" alpha Alpha transparency to apply to arcs that extend beyond viewport. Number between 0 and 1 0.5 thickness Line thickness 2","title":"Configuration Options"},{"location":"tracks/Interact/#arc-types","text":"nested - Arc height is proportional to feature width. propotional - Arc height is proportional to feature score. inView - Proportional type, only arcs that are completely in view are drawn. partialInView - Proportional type, only arcs that are whole or partially in view are drawn.","title":"Arc types"},{"location":"tracks/Interact/#example","text":"const options = { genome: \"hg38\", locus: \"chr2:65,489,209-65,795,733\", tracks: [ { url: \"https://s3.amazonaws.com/igv.org.demo/GSM1872886_GM12878_CTCF_PET.bedpe.txt\", type: \"interact\", format: \"bedpe\", name: \"CTCF PET - proportional\", arcType: \"proportional\", arcOrientation: \"UP\", color: \"rgb(0,200,0)\", logScale: true, max: 80, visibilityWindow: 10000000 }, { url: \"https://s3.amazonaws.com/igv.org.demo/GSM1872886_GM12878_CTCF_PET.bedpe.txt\", type: \"interact\", format: \"bedpe\", name: \"CTCF PET - nested\", arcType: \"nested\", arcOrientation: \"DOWN\", color: \"blue\", alpha: 0.15, visibilityWindow: 10000000 } ] }","title":"Example"},{"location":"tracks/Merged/","text":"Merged Track The merged track ( type = 'merged' ) is used to overlay multiple wig tracks. Configuration Options # General options Property Description Default alpha Alpha transparency to apply to individual track colors. Number between 0 and 1 0.5 Example # { name: \"Merged\", height: 50, type: \"merged\", tracks: [ { \"type\": \"wig\", \"format\": \"bigwig\", \"url\": \"https://www.encodeproject.org/files/ENCFF000ASJ/@@download/ENCFF000ASJ.bigWig\", \"color\": \"red\" }, { \"type\": \"wig\", \"format\": \"bigwig\", \"url\": \"https://www.encodeproject.org/files/ENCFF351WPV/@@download/ENCFF351WPV.bigWig\", \"color\": \"green\" } ] }","title":"Merged Wig"},{"location":"tracks/Merged/#configuration-options","text":"General options Property Description Default alpha Alpha transparency to apply to individual track colors. Number between 0 and 1 0.5","title":"Configuration Options"},{"location":"tracks/Merged/#example","text":"{ name: \"Merged\", height: 50, type: \"merged\", tracks: [ { \"type\": \"wig\", \"format\": \"bigwig\", \"url\": \"https://www.encodeproject.org/files/ENCFF000ASJ/@@download/ENCFF000ASJ.bigWig\", \"color\": \"red\" }, { \"type\": \"wig\", \"format\": \"bigwig\", \"url\": \"https://www.encodeproject.org/files/ENCFF351WPV/@@download/ENCFF351WPV.bigWig\", \"color\": \"green\" } ] }","title":"Example"},{"location":"tracks/Mutation-Track/","text":"Mutation Track The mutation track( type=\"mut\" ) displays data from the National Cancer Institute's \"mut\" and \"maf\" file formats. File Formats # mut maf Example # { type: 'mut', format: 'maf', url: 'https://s3.amazonaws.com/igv.org.demo/TCGA.BRCA.mutect.995c0111-d90b-4140-bee7-3845436c3b42.DR-10.0.somatic.maf.gz', indexed: false, height: 700, displayMode: \"EXPANDED\", } Configuration Options # General options Property Type Description Default format string Either mut or maf Inferred from file extension displayMode string One of EXPANDED, SQUISHED, COLLAPSED. EXPANDED","title":"Mutations"},{"location":"tracks/Mutation-Track/#file-formats","text":"mut maf","title":"File Formats"},{"location":"tracks/Mutation-Track/#example","text":"{ type: 'mut', format: 'maf', url: 'https://s3.amazonaws.com/igv.org.demo/TCGA.BRCA.mutect.995c0111-d90b-4140-bee7-3845436c3b42.DR-10.0.somatic.maf.gz', indexed: false, height: 700, displayMode: \"EXPANDED\", }","title":"Example"},{"location":"tracks/Mutation-Track/#configuration-options","text":"General options Property Type Description Default format string Either mut or maf Inferred from file extension displayMode string One of EXPANDED, SQUISHED, COLLAPSED. EXPANDED","title":"Configuration Options"},{"location":"tracks/QTL-Track/","text":"QTL Track The qtl track ( type=\"qtl\" ) displays xQTL data. File Formats # qtl # Suggested file extension: '.qtl' or '.qtl.tsv' This is a flexible tab-delimited format. Any number of columns are supported but must include chromosome, position (1- based), and value (p-value or probability). A column header is required. Position of the required columns can be specified in the file column header, as described below, or in the track configuration (see example). Remaining columns are used for the popup text display. To specify column positions for the required fields include the following case-insensitive column headers in the header line. CHR : chromosome (aliases: chromosome, chrom, chr_id) BP : nucleotide location (aliases: bp, pos, position, chr_pos, chromEnd) SNP : SNP identifier (aliases: rsid, variant) P : p-value for the association (aliases: p, pval, p-value, pvalue, p.value) Phenotype feature name for the associated phenotype. For example, a gene name for an eqtl. (aliases: gene, gene_id, molecular_trait_id) CHR SNP BP P Phenotype 1 rs61769351 758443 0.000426 TTLL10 1 rs1323158546 791100 0.000419 TTLL10 1 rs58276399 796338 0.000485 TTLL10 ... Configuration Options # General options Property Description Default min Minimum value of y-axis in -log10 units. 3.5 max Maximum value of y-axis in -log10 units. Optional, if not specified max is set as a percentile of values in view. autoscalePercentile Upper percentile for setting max value when autoscaling. Number between 0 and 100. 98 Example # { type: \"qtl\", format: \"qtl\", name: \"B cell eQTL\", url: \"https://igv-genepattern-org.s3.amazonaws.com/test/qtl/B.cell_eQTL.tsv.gz\", indexURL: \"https://igv-genepattern-org.s3.amazonaws.com/test/qtl/B.cell_eQTL.tsv.gz.tbi\", visibilityWindow: 4000000 }","title":"QTL"},{"location":"tracks/QTL-Track/#file-formats","text":"","title":"File Formats"},{"location":"tracks/QTL-Track/#qtl","text":"Suggested file extension: '.qtl' or '.qtl.tsv' This is a flexible tab-delimited format. Any number of columns are supported but must include chromosome, position (1- based), and value (p-value or probability). A column header is required. Position of the required columns can be specified in the file column header, as described below, or in the track configuration (see example). Remaining columns are used for the popup text display. To specify column positions for the required fields include the following case-insensitive column headers in the header line. CHR : chromosome (aliases: chromosome, chrom, chr_id) BP : nucleotide location (aliases: bp, pos, position, chr_pos, chromEnd) SNP : SNP identifier (aliases: rsid, variant) P : p-value for the association (aliases: p, pval, p-value, pvalue, p.value) Phenotype feature name for the associated phenotype. For example, a gene name for an eqtl. (aliases: gene, gene_id, molecular_trait_id) CHR SNP BP P Phenotype 1 rs61769351 758443 0.000426 TTLL10 1 rs1323158546 791100 0.000419 TTLL10 1 rs58276399 796338 0.000485 TTLL10 ...","title":"qtl"},{"location":"tracks/QTL-Track/#configuration-options","text":"General options Property Description Default min Minimum value of y-axis in -log10 units. 3.5 max Maximum value of y-axis in -log10 units. Optional, if not specified max is set as a percentile of values in view. autoscalePercentile Upper percentile for setting max value when autoscaling. Number between 0 and 100. 98","title":"Configuration Options"},{"location":"tracks/QTL-Track/#example","text":"{ type: \"qtl\", format: \"qtl\", name: \"B cell eQTL\", url: \"https://igv-genepattern-org.s3.amazonaws.com/test/qtl/B.cell_eQTL.tsv.gz\", indexURL: \"https://igv-genepattern-org.s3.amazonaws.com/test/qtl/B.cell_eQTL.tsv.gz.tbi\", visibilityWindow: 4000000 }","title":"Example"},{"location":"tracks/Seg-Track/","text":"Segmented Copy Number Track The segmented copy number ( type=\"seg\" ) track displays segmented copy number values as a heatmap, red = amplifications, blue = deletions. There are 2 common conventions for values in segmented copy number files, the copy number itself, and a log score computed from score = 2 * log2( copyNumber / 2) The value type is indicated by the isLog property. If no value is set for this property it is inferred by the values in the file, all positive values => isLog = false. The presence of any negative values => isLog = true. File Formats # seg # A seg file (file extension .seg) is a tab-delimited text file that lists loci and associated numeric values. The first row contains column headings, and each subsequent row contains a locus and an associated numeric value. IGV ignores the column headings. It reads the first four columns as track name, chromosome, start location, and end location. It reads the last column as the numeric value for that locus (if the value is non-numeric, IGV ignores the row). IGV ignores all other columns. The segmented data file format is the output of the Circular Binary Segmentation algorithm (Olshen et al., 2004). Example # { type: \"seg\", format: \"seg\", url: \"https://s3.amazonaws.com/igv.org.demo/GBM-TP.seg.gz\", indexed: false, isLog: true, name: \"GBM Copy # (TCGA Broad GDAC)\", sort: { direction: \"DESC\", // ASC | DESC chr : \"chr7\", start: 55174641, end: 55175252 } } Configuration Options # General options Property Type Description Default isLog boolean True if values are 2 * log2(copyNumber / 2). computed displayMode string One of \"EXPANDED\", \"SQUISHED\", or \"FILL\". The value affects the sample height (height of each row). The \"FILL\" value will result in all samples visible in the track view. \"EXPANDED\" sort object An object specifying initial sort order(options). See example below.","title":"Segmented Copy Number"},{"location":"tracks/Seg-Track/#file-formats","text":"","title":"File Formats"},{"location":"tracks/Seg-Track/#seg","text":"A seg file (file extension .seg) is a tab-delimited text file that lists loci and associated numeric values. The first row contains column headings, and each subsequent row contains a locus and an associated numeric value. IGV ignores the column headings. It reads the first four columns as track name, chromosome, start location, and end location. It reads the last column as the numeric value for that locus (if the value is non-numeric, IGV ignores the row). IGV ignores all other columns. The segmented data file format is the output of the Circular Binary Segmentation algorithm (Olshen et al., 2004).","title":"seg"},{"location":"tracks/Seg-Track/#example","text":"{ type: \"seg\", format: \"seg\", url: \"https://s3.amazonaws.com/igv.org.demo/GBM-TP.seg.gz\", indexed: false, isLog: true, name: \"GBM Copy # (TCGA Broad GDAC)\", sort: { direction: \"DESC\", // ASC | DESC chr : \"chr7\", start: 55174641, end: 55175252 } }","title":"Example"},{"location":"tracks/Seg-Track/#configuration-options","text":"General options Property Type Description Default isLog boolean True if values are 2 * log2(copyNumber / 2). computed displayMode string One of \"EXPANDED\", \"SQUISHED\", or \"FILL\". The value affects the sample height (height of each row). The \"FILL\" value will result in all samples visible in the track view. \"EXPANDED\" sort object An object specifying initial sort order(options). See example below.","title":"Configuration Options"},{"location":"tracks/Splice-Junctions/","text":"Splice Junction Track type = 'junction' File formats # bed # The source file for this track is a .bed file. Each row in the .bed file represents a single splice junction. The name field (column #4) is used to encode the following attributes as semicolon separated key-value pairs (GFF3 column 9 format). Attributes: motif - one of 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical' (from STAR v2.4) uniquely_mapped - number of uniquely mapped reads spanning this junction multi_mapped - number of non-uniquely mapped reads spanning this junction maximum_spliced_alignment_overhang - used as a filter if minSplicedAlignmentOverhang is defined in the track configuration annotationed_juncion This is an example .bed file row: chr15 92883778 92885514 motif=GT/AG;uniquely_mapped=95;multi_mapped=10;maximum_spliced_alignment_overhang=38;annotated_junction=true 95 + Here the attributes are taken directly from the STAR v2 aligner *.SJ.out.tab file. Configuration Options # General options config settings for this track fall into 2 categories: Filtering Options determine which splice junctions are shown, while Display Options change how the splice junctions are displayed. Display Options # Property Description Default colorBy Splice junction color. Possible values: \"numUniqueReads\", \"numReads\", \"isAnnotatedJunction\", \"strand\", \"motif\" \"numUniqueReads\" colorByNumReadsThreshold If colorBy is set to \"numUniqueReads\" or \"numReads\", junction color will be darker when number of reads > this threshold 5 thicknessBasedOn Splice junction line thickness. Possible values: \"numUniqueReads\", \"numReads\", \"isAnnotatedJunction\" \"numUniqueReads\" bounceHeightBasedOn Splice junction curve height. Possible values: \"random\", \"distance\", \"thickness\" \"random\" labelUniqueReadCount Add unique read counts to splice junction label true labelMultiMappedReadCount Add multi-mapped read counts to splice junction label true labelTotalReadCount Add total read counts to splice junction label false labelMotif Add splice junction motif to its label false labelAnnotatedJunction If defined, this string will be appended to the labels of splice junctions that exist in known gene models (eg. for which annotated_junction=true in the .bed file). Example value: \" [A]\" null minSplicedAlignmentOverhang null Filtering Options # Property Description Default minUniquelyMappedReads Junction must be supported by at least this many uniquely-mapped reads. 0 minTotalReads Junction must be supported by at least this many uniquely-mapped + multi-mapped reads. 0 maxFractionMultiMappedReads (uniquely-mapped reads)/(total reads) must be <= this threshold 1 minSplicedAlignmentOverhang Mininum spliced alignment overhang in base pairs. See STAR aligner docs for more details. 0 hideStrand Set to \"+\" or \"-\" to hide junctions on the plus or minus strand. null hideAnnotatedJunctions If true, only novel junctions will be shown (eg. those not found in gene models passed to the aligner) false hideUnannotatedJunctions If true, only annotated junctions will be shown (eg. those found in gene models passed to the aligner) false hideMotifs A list of strings for motif values to hide. For example: ['GT/AT', 'non-canonical'] [] Example # { type: 'spliceJunctions', format: 'bed', url: `${rootUrl}/${prefix}.SJ.out.bed.gz`, indexURL: `${rootUrl}/${prefix}.SJ.out.bed.gz.tbi`, minUniquelyMappedReads: 1, minTotalReads: 1, maxFractionMultiMappedReads: 1, minSplicedAlignmentOverhang: 0, thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction bounceHeightBasedOn: 'random', //options: random (default), distance, thickness colorBy: 'isAnnotatedJunction', //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif labelUniqueReadCount: true, labelMultiMappedReadCount: true, labelTotalReadCount: false, labelMotif: false, labelAnnotatedJunction: \" [A]\", hideStrand: '-', hideAnnotatedJunctions: false, hideUnannotatedJunctions: false, hideMotifs: ['GT/AT', 'non-canonical'], //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical', }, Sashimi track: combine 'spliceJunctions' track with 'wig' track # The 'merged' track type allows a 'spliceJunctions' track to be rendered on top of a 'wig' track to create a full sashimi-like track. Besides the .bed.gz file described above, this also requires a separate .bigWig file. { type: 'merged', name: prefix, height: 150, tracks: [ { type: 'wig', format: \"bigwig\", url: `${rootUrl}/${prefix}.bigWig`, }, { type: 'spliceJunctions', format: 'bed', url: `${rootUrl}/${prefix}.SJ.out.bed.gz`, indexURL: `${rootUrl}/${prefix}.SJ.out.bed.gz.tbi`, minUniquelyMappedReads: 1, ... }, ], }","title":"Junctions"},{"location":"tracks/Splice-Junctions/#file-formats","text":"","title":"File formats"},{"location":"tracks/Splice-Junctions/#bed","text":"The source file for this track is a .bed file. Each row in the .bed file represents a single splice junction. The name field (column #4) is used to encode the following attributes as semicolon separated key-value pairs (GFF3 column 9 format). Attributes: motif - one of 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical' (from STAR v2.4) uniquely_mapped - number of uniquely mapped reads spanning this junction multi_mapped - number of non-uniquely mapped reads spanning this junction maximum_spliced_alignment_overhang - used as a filter if minSplicedAlignmentOverhang is defined in the track configuration annotationed_juncion This is an example .bed file row: chr15 92883778 92885514 motif=GT/AG;uniquely_mapped=95;multi_mapped=10;maximum_spliced_alignment_overhang=38;annotated_junction=true 95 + Here the attributes are taken directly from the STAR v2 aligner *.SJ.out.tab file.","title":"bed"},{"location":"tracks/Splice-Junctions/#configuration-options","text":"General options config settings for this track fall into 2 categories: Filtering Options determine which splice junctions are shown, while Display Options change how the splice junctions are displayed.","title":"Configuration Options"},{"location":"tracks/Splice-Junctions/#display-options","text":"Property Description Default colorBy Splice junction color. Possible values: \"numUniqueReads\", \"numReads\", \"isAnnotatedJunction\", \"strand\", \"motif\" \"numUniqueReads\" colorByNumReadsThreshold If colorBy is set to \"numUniqueReads\" or \"numReads\", junction color will be darker when number of reads > this threshold 5 thicknessBasedOn Splice junction line thickness. Possible values: \"numUniqueReads\", \"numReads\", \"isAnnotatedJunction\" \"numUniqueReads\" bounceHeightBasedOn Splice junction curve height. Possible values: \"random\", \"distance\", \"thickness\" \"random\" labelUniqueReadCount Add unique read counts to splice junction label true labelMultiMappedReadCount Add multi-mapped read counts to splice junction label true labelTotalReadCount Add total read counts to splice junction label false labelMotif Add splice junction motif to its label false labelAnnotatedJunction If defined, this string will be appended to the labels of splice junctions that exist in known gene models (eg. for which annotated_junction=true in the .bed file). Example value: \" [A]\" null minSplicedAlignmentOverhang null","title":"Display Options"},{"location":"tracks/Splice-Junctions/#filtering-options","text":"Property Description Default minUniquelyMappedReads Junction must be supported by at least this many uniquely-mapped reads. 0 minTotalReads Junction must be supported by at least this many uniquely-mapped + multi-mapped reads. 0 maxFractionMultiMappedReads (uniquely-mapped reads)/(total reads) must be <= this threshold 1 minSplicedAlignmentOverhang Mininum spliced alignment overhang in base pairs. See STAR aligner docs for more details. 0 hideStrand Set to \"+\" or \"-\" to hide junctions on the plus or minus strand. null hideAnnotatedJunctions If true, only novel junctions will be shown (eg. those not found in gene models passed to the aligner) false hideUnannotatedJunctions If true, only annotated junctions will be shown (eg. those found in gene models passed to the aligner) false hideMotifs A list of strings for motif values to hide. For example: ['GT/AT', 'non-canonical'] []","title":"Filtering Options"},{"location":"tracks/Splice-Junctions/#example","text":"{ type: 'spliceJunctions', format: 'bed', url: `${rootUrl}/${prefix}.SJ.out.bed.gz`, indexURL: `${rootUrl}/${prefix}.SJ.out.bed.gz.tbi`, minUniquelyMappedReads: 1, minTotalReads: 1, maxFractionMultiMappedReads: 1, minSplicedAlignmentOverhang: 0, thicknessBasedOn: 'numUniqueReads', //options: numUniqueReads (default), numReads, isAnnotatedJunction bounceHeightBasedOn: 'random', //options: random (default), distance, thickness colorBy: 'isAnnotatedJunction', //options: numUniqueReads (default), numReads, isAnnotatedJunction, strand, motif labelUniqueReadCount: true, labelMultiMappedReadCount: true, labelTotalReadCount: false, labelMotif: false, labelAnnotatedJunction: \" [A]\", hideStrand: '-', hideAnnotatedJunctions: false, hideUnannotatedJunctions: false, hideMotifs: ['GT/AT', 'non-canonical'], //options: 'GT/AG', 'CT/AC', 'GC/AG', 'CT/GC', 'AT/AC', 'GT/AT', 'non-canonical', },","title":"Example"},{"location":"tracks/Splice-Junctions/#sashimi-track-combine-splicejunctions-track-with-wig-track","text":"The 'merged' track type allows a 'spliceJunctions' track to be rendered on top of a 'wig' track to create a full sashimi-like track. Besides the .bed.gz file described above, this also requires a separate .bigWig file. { type: 'merged', name: prefix, height: 150, tracks: [ { type: 'wig', format: \"bigwig\", url: `${rootUrl}/${prefix}.bigWig`, }, { type: 'spliceJunctions', format: 'bed', url: `${rootUrl}/${prefix}.SJ.out.bed.gz`, indexURL: `${rootUrl}/${prefix}.SJ.out.bed.gz.tbi`, minUniquelyMappedReads: 1, ... }, ], }","title":"Sashimi track: combine 'spliceJunctions' track with 'wig' track"},{"location":"tracks/Tracks/","text":"Tracks Tracks in igv.js are categorized by type. Each type is designed to display a particular class of genomic data, such as read alignments or annotations. Track Types # Current track types include: Track Type Description Associated File Formats annotation Non-quantitative genome annotations such as genes. This is the most generic track type. bed, gff, gff3, gtf, bedpe, and others wig Quantitative genomic data, such as ChIP peaks and alignment coverage. wig, bigWig, bedGraph alignment Sequencing alignments. bam, cram variant Genomic variants vcf seg Segmented copy number data. seg mut Mutation data, primarily from cancer studies. maf, mut interact Arcs representing associations or interactions between 2 genomic loci. bedpe, interact, bigInteract gwas Genome wide association data (manhattan plots) gwas, bed arc RNA secondary structure bp , bed junction RNA splice junctions bed qtl Quantitative trait locus qtl pytor Copy number analysis pytor, vcf merged Overlayed wig tracks Configuring Tracks # Tracks can be added during initial browser configuration, or via the browser API with the loadTrack function. In both cases a track is configured with an options object. For example, the following object creates a gene annotation track from an indexed BED file. The track will open initially in \"expanded\" mode. { name: \"Genes\", type: \"annotation\", format: \"bed\", url: \"<url to your bed file>\", displayMode: \"EXPANDED\" } Configuration Options for all track types # Property Description Default type Track type No default. If not specified, type is inferred from file format sourceType Type of data source. Valid values are \"file\", \"htsget\", and \"custom\" file format File format No default. If not specified format is inferred from file name extension name Display name (label). Required url URL to the track data resource, such as a file or webservice, or a data URI . As of release 2.5.2 the url property can be a function or promise that returns or resolves to a url string. indexURL URL to a file index, such as a BAM .bai, tabix .tbi, or tribble .idx file. Notes: For indexed file access the index URL is required, if absent the entire file will be read. As of release 2.5.2 the indexURL property can be a function or promise that resolves to a URL string. indexed Flag provided to explicitly indicate the resource is not indexed. If a resource is indexed the indexURL should be provided in which case this flag is redundant. This flag can be used to load small BAM files without an index by setting to false order Integer value specifying relative order of track position on the screen. To pin a track to the bottom use Number.MAX_VALUE. If no order is specified, tracks appear in order of their addition. color CSS color value for track features, e.g. \"#ff0000\" or \"rgb(100,0,100)\". height Initial height of track viewport in pixels 50 minHeight Minimum height of track in pixels 50 maxHeight Maximum height of track in pixels 500 visibilityWindow Maximum window size in base pairs for which indexed annotations or variants are displayed 1 MB for variants, 30 KB for alignments, whole chromosome for other track types removable If true a \"remove\" item is included in the track menu. true headers http headers to include with each request. For example {\"Authorization\": \"Bearer cn389ncoiwuencr\"} . oauthToken OAuth token, or function returning an OAuth token. The value will be included as a Bearer token with each request. See Oauth Support","title":"General"},{"location":"tracks/Tracks/#track-types","text":"Current track types include: Track Type Description Associated File Formats annotation Non-quantitative genome annotations such as genes. This is the most generic track type. bed, gff, gff3, gtf, bedpe, and others wig Quantitative genomic data, such as ChIP peaks and alignment coverage. wig, bigWig, bedGraph alignment Sequencing alignments. bam, cram variant Genomic variants vcf seg Segmented copy number data. seg mut Mutation data, primarily from cancer studies. maf, mut interact Arcs representing associations or interactions between 2 genomic loci. bedpe, interact, bigInteract gwas Genome wide association data (manhattan plots) gwas, bed arc RNA secondary structure bp , bed junction RNA splice junctions bed qtl Quantitative trait locus qtl pytor Copy number analysis pytor, vcf merged Overlayed wig tracks","title":"Track Types"},{"location":"tracks/Tracks/#configuring-tracks","text":"Tracks can be added during initial browser configuration, or via the browser API with the loadTrack function. In both cases a track is configured with an options object. For example, the following object creates a gene annotation track from an indexed BED file. The track will open initially in \"expanded\" mode. { name: \"Genes\", type: \"annotation\", format: \"bed\", url: \"<url to your bed file>\", displayMode: \"EXPANDED\" }","title":"Configuring Tracks"},{"location":"tracks/Tracks/#configuration-options-for-all-track-types","text":"Property Description Default type Track type No default. If not specified, type is inferred from file format sourceType Type of data source. Valid values are \"file\", \"htsget\", and \"custom\" file format File format No default. If not specified format is inferred from file name extension name Display name (label). Required url URL to the track data resource, such as a file or webservice, or a data URI . As of release 2.5.2 the url property can be a function or promise that returns or resolves to a url string. indexURL URL to a file index, such as a BAM .bai, tabix .tbi, or tribble .idx file. Notes: For indexed file access the index URL is required, if absent the entire file will be read. As of release 2.5.2 the indexURL property can be a function or promise that resolves to a URL string. indexed Flag provided to explicitly indicate the resource is not indexed. If a resource is indexed the indexURL should be provided in which case this flag is redundant. This flag can be used to load small BAM files without an index by setting to false order Integer value specifying relative order of track position on the screen. To pin a track to the bottom use Number.MAX_VALUE. If no order is specified, tracks appear in order of their addition. color CSS color value for track features, e.g. \"#ff0000\" or \"rgb(100,0,100)\". height Initial height of track viewport in pixels 50 minHeight Minimum height of track in pixels 50 maxHeight Maximum height of track in pixels 500 visibilityWindow Maximum window size in base pairs for which indexed annotations or variants are displayed 1 MB for variants, 30 KB for alignments, whole chromosome for other track types removable If true a \"remove\" item is included in the track menu. true headers http headers to include with each request. For example {\"Authorization\": \"Bearer cn389ncoiwuencr\"} . oauthToken OAuth token, or function returning an OAuth token. The value will be included as a Bearer token with each request. See Oauth Support","title":"Configuration Options for all track types"},{"location":"tracks/Variant-Track/","text":"Variant Track The variant track ( type=\"variant\" ) displays variant records from \"VCF\" files or equivalents. File formats # vcf Configuration Options # General options Property Description Default displayMode Display option. 'COLLAPSED' => show variants only, 'SQUISHED' and 'EXPANDED' => show calls. 'EXPANDED' squishedCallHeight Height of genotype call rows in SQUISHED mode. 1 expandedCallHeight Height of genotype call rows in EXPANDED mode 10 Variant color options # Property Description Default color Specify a variant color, or function that takes a variant object and returns a color. colorBy Specify an INFO field to color variants by. Optional, if specified takes precedence over color property colorTable Color table mapping INFO field values to colors. Use in conjunction with colorBy. Optional, if not specified a color table will be generated. Genotype color options # Property Description Default noCallColor Color for no-calls \"rgb(250, 250, 250)\" homvarColor CSS color for homozygous non-reference calls. \"rgb(17,248,254)\" hetvarColor CSS color for heterozygous calls. \"rgb(34,12,253)\" homrefColor CSS color for homozygous reference calls. \"rgb(200, 200, 200)\" Examples # Tabix indexed file # { type: \"variant\", format: \"vcf\", url: \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz\", indexURL: \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi\", name: \"1KG variants (chr22)\", squishedCallHeight: 1, expandedCallHeight: 4, displayMode: \"squished\", visibilityWindow: 1000 } ``` ### Color-by info field with color table ```javascript { url: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz.tbi\", name: \"Color by table, SVTYPE\", visibilityWindow: -1, colorBy: \"SVTYPE\", colorTable: { \"DEL\": \"#ff2101\", \"INS\": \"#001888\", \"DUP\": \"#028401\", \"INV\": \"#008688\", \"CNV\": \"#8931ff\", \"BND\": \"#891100\", \"*\": \"#002eff\" } } Color-by function. NOTE: functions cannot be saved in session files. # { url: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz.tbi\", name: \"Color by function, SVTYPE\", visibilityWindow: -1, color: function (variant) { const svtype = variant.info[\"SVTYPE\"]; switch (svtype) { case 'DEL': return \"#ff2101\"; case 'INS': return \"#001888\"; case 'DUP': return \"#028401\"; case 'INV': return \"#008688\"; case 'CNV': return \"#8931ff\"; case 'BND': return \"#891100\"; default: return \"#002eff\"; } } }","title":"Variant"},{"location":"tracks/Variant-Track/#file-formats","text":"vcf","title":"File formats"},{"location":"tracks/Variant-Track/#configuration-options","text":"General options Property Description Default displayMode Display option. 'COLLAPSED' => show variants only, 'SQUISHED' and 'EXPANDED' => show calls. 'EXPANDED' squishedCallHeight Height of genotype call rows in SQUISHED mode. 1 expandedCallHeight Height of genotype call rows in EXPANDED mode 10","title":"Configuration Options"},{"location":"tracks/Variant-Track/#variant-color-options","text":"Property Description Default color Specify a variant color, or function that takes a variant object and returns a color. colorBy Specify an INFO field to color variants by. Optional, if specified takes precedence over color property colorTable Color table mapping INFO field values to colors. Use in conjunction with colorBy. Optional, if not specified a color table will be generated.","title":"Variant color options"},{"location":"tracks/Variant-Track/#genotype-color-options","text":"Property Description Default noCallColor Color for no-calls \"rgb(250, 250, 250)\" homvarColor CSS color for homozygous non-reference calls. \"rgb(17,248,254)\" hetvarColor CSS color for heterozygous calls. \"rgb(34,12,253)\" homrefColor CSS color for homozygous reference calls. \"rgb(200, 200, 200)\"","title":"Genotype color options"},{"location":"tracks/Variant-Track/#examples","text":"","title":"Examples"},{"location":"tracks/Variant-Track/#tabix-indexed-file","text":"{ type: \"variant\", format: \"vcf\", url: \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz\", indexURL: \"https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi\", name: \"1KG variants (chr22)\", squishedCallHeight: 1, expandedCallHeight: 4, displayMode: \"squished\", visibilityWindow: 1000 } ``` ### Color-by info field with color table ```javascript { url: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz.tbi\", name: \"Color by table, SVTYPE\", visibilityWindow: -1, colorBy: \"SVTYPE\", colorTable: { \"DEL\": \"#ff2101\", \"INS\": \"#001888\", \"DUP\": \"#028401\", \"INV\": \"#008688\", \"CNV\": \"#8931ff\", \"BND\": \"#891100\", \"*\": \"#002eff\" } }","title":"Tabix indexed file"},{"location":"tracks/Variant-Track/#color-by-function-note-functions-cannot-be-saved-in-session-files","text":"{ url: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz\", indexURL: \"https://s3.amazonaws.com/igv.org.demo/nstd186.GRCh38.variant_call.vcf.gz.tbi\", name: \"Color by function, SVTYPE\", visibilityWindow: -1, color: function (variant) { const svtype = variant.info[\"SVTYPE\"]; switch (svtype) { case 'DEL': return \"#ff2101\"; case 'INS': return \"#001888\"; case 'DUP': return \"#028401\"; case 'INV': return \"#008688\"; case 'CNV': return \"#8931ff\"; case 'BND': return \"#891100\"; default: return \"#002eff\"; } } }","title":"Color-by function. NOTE: functions cannot be saved in session files."},{"location":"tracks/Wig-Track/","text":"Wig Track The wig track ( type = 'wig' ) displays quantititive data as either a bar chart, line plot, or points. File formats # wig bedGraph bigwig Configuration Options # General options Property Description Default autoscale Autoscale track to maximum value in view autoscaleGroup Identifier for an autoscale group. Tracks with the same identifier are autoscaled together. min Sets the minimum value for the data (y-axis) scale. Usually zero. 0 max Sets the maximum value for the data (y-axis) scale. This value is ignored if autoscale = true color Track color as as an \"rgb(,,,)\" string, a hex string, or css color name. Alternatively a function can be supplied which takes value as a parameter and returns a color. \"rgb(150,150,150)\" altColor If supplied, used for negative values. See description of color field above. colorScale Color scale for heatmap (graphType = \"heatmap\" ). See description below guideLines Draws a horizontal line for each object in the given array: guideLines: [ {color: [color], y: [number], dotted: [bool]} ] Note: y value should be between min and max or it will not show. graphType Type of graph: \"bar\", \"points\", \"line\", or \"heatmap\" bar flipAxis If true, track is drawn \"upside down\" with zero at top false windowFunction Applicable to tracks created from bigwig and tdf files. Governs how data is summarized when zooming out. Options correspond to data in the file but generally include min , max , and mean . mean Color Scale Objects # A colorScale is described with an object of the form { \"type\": string, \"min\": number, \"mid\": number, \"max\": number, \"minColor\": string, \"midColor\": string, \"maxColor\": string } Two types of color scales are supported type = 'gradient' : A gradient color scale that varies linearlly from minColor to maxColor between min and max values. The mid and midColor properties are ignored. type = 'diverging' : Consist of 2 gradient color scales covering the range min->mid and mid-> max The color strings can be one of: Hex format: #rrggbb RGB format: rgb(red, green, blue) Name format: name Example # { type: \"wig\", name: \"CTCF\", url: \"https://www.encodeproject.org/files/ENCFF356YES/@@download/ENCFF356YES.bigWig\", min: \"0\", max: \"30\", color: \"rgb(0, 0, 150)\", guideLines: [ {color: 'green', dotted: true, y: 25}, {color: 'red', dotted: false, y: 5} ] }","title":"Wig"},{"location":"tracks/Wig-Track/#file-formats","text":"wig bedGraph bigwig","title":"File formats"},{"location":"tracks/Wig-Track/#configuration-options","text":"General options Property Description Default autoscale Autoscale track to maximum value in view autoscaleGroup Identifier for an autoscale group. Tracks with the same identifier are autoscaled together. min Sets the minimum value for the data (y-axis) scale. Usually zero. 0 max Sets the maximum value for the data (y-axis) scale. This value is ignored if autoscale = true color Track color as as an \"rgb(,,,)\" string, a hex string, or css color name. Alternatively a function can be supplied which takes value as a parameter and returns a color. \"rgb(150,150,150)\" altColor If supplied, used for negative values. See description of color field above. colorScale Color scale for heatmap (graphType = \"heatmap\" ). See description below guideLines Draws a horizontal line for each object in the given array: guideLines: [ {color: [color], y: [number], dotted: [bool]} ] Note: y value should be between min and max or it will not show. graphType Type of graph: \"bar\", \"points\", \"line\", or \"heatmap\" bar flipAxis If true, track is drawn \"upside down\" with zero at top false windowFunction Applicable to tracks created from bigwig and tdf files. Governs how data is summarized when zooming out. Options correspond to data in the file but generally include min , max , and mean . mean","title":"Configuration Options"},{"location":"tracks/Wig-Track/#color-scale-objects","text":"A colorScale is described with an object of the form { \"type\": string, \"min\": number, \"mid\": number, \"max\": number, \"minColor\": string, \"midColor\": string, \"maxColor\": string } Two types of color scales are supported type = 'gradient' : A gradient color scale that varies linearlly from minColor to maxColor between min and max values. The mid and midColor properties are ignored. type = 'diverging' : Consist of 2 gradient color scales covering the range min->mid and mid-> max The color strings can be one of: Hex format: #rrggbb RGB format: rgb(red, green, blue) Name format: name","title":"Color Scale Objects"},{"location":"tracks/Wig-Track/#example","text":"{ type: \"wig\", name: \"CTCF\", url: \"https://www.encodeproject.org/files/ENCFF356YES/@@download/ENCFF356YES.bigWig\", min: \"0\", max: \"30\", color: \"rgb(0, 0, 150)\", guideLines: [ {color: 'green', dotted: true, y: 25}, {color: 'red', dotted: false, y: 5} ] }","title":"Example"}]}